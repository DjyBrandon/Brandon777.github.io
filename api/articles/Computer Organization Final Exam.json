{"title":"Computer Organization Final Exam","uid":"112cac3ec839e9ef0f511687544cce5a","slug":"Computer Organization Final Exam","date":"2022-12-30T06:59:28.000Z","updated":"2023-02-15T03:56:39.543Z","comments":true,"path":"api/articles/Computer Organization Final Exam.json","keywords":null,"cover":"https://www.sigarch.org/wp-content/uploads/2019/09/AdobeStock_251486231.jpeg","content":"<h1 id=\"题型\"><a href=\"#题型\" class=\"headerlink\" title=\"题型\"></a>题型</h1><p>15道选择30分</p>\n<p>70分综合（7-8道大题）</p>\n<p>题型课后题</p>\n<h1 id=\"CH-2-补码定点运算\"><a href=\"#CH-2-补码定点运算\" class=\"headerlink\" title=\"CH 2 补码定点运算\"></a>CH 2 补码定点运算</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>计算题，大题补码运算（补码加减法，定点加减法）</p></blockquote>\n<ul>\n<li>真值：计算机中用 <strong>正负号+绝对值</strong> 表示的数。</li>\n<li>机器数：计算机中把 <strong>符号位和数值</strong> 数码化以后的数。</li>\n<li><p>原码：在数值前直接加一<strong>符号位</strong>的表示法。0正1负，其余位表示数值的大小，+0=0，-0=1</p>\n<ul>\n<li>定点小数范围 $-(1-2^{-n})\\sim+(1-2^{-n})$</li>\n<li>定点整数范围 $-(2^n-1)\\sim+(2^n-1)$</li>\n</ul>\n</li>\n<li><p>反码：正数的反码与其原码相同；负数的反码是对其除符号位原码逐位取反。反码表示有正0和负0之分，</p>\n</li>\n<li><p>补码：正数的补码与其原码相同；负数的补码是在其反码的末位加1。</p>\n<ul>\n<li><p>变补：$[X]_补\\leftrightarrow[-X]补$，求反符号位改变，再末位加一</p>\n</li>\n<li><p>补码算术右移时，要将符号位复制。补码算术左移（最高两位符号相同）时，末位补0即可。</p>\n</li>\n<li><p>定点整数补码位数扩展时，要将符号位向左复制；定点小数补码进行位数扩展时，只需要在原机器码后补0即可 </p>\n</li>\n</ul>\n</li>\n<li><p>移码：正数负数移码都为补码符号位取反，范围 $-2^n\\sim2^n-1$。</p>\n</li>\n<li><p>IEEE754：<code>符号位</code>（1位）+ <code>阶码+127</code>（8位）+ <code>尾数隐藏首位1</code>（23位）</p>\n</li>\n</ul>\n<h2 id=\"补码加减法\"><a href=\"#补码加减法\" class=\"headerlink\" title=\"补码加减法\"></a>补码加减法</h2><ul>\n<li>$[x+y]_补=[x]_补+[y]_补$</li>\n<li>$[x-y]_补=[x]_补+[-y]_补$<ul>\n<li>$[-y]_补=[y]_补$ 带符号位按位取反 $+1$</li>\n<li>小数转补码乘2至1，依次取每个结果的符号位</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"溢出判断\"><a href=\"#溢出判断\" class=\"headerlink\" title=\"溢出判断\"></a>溢出判断</h2><p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221229094601192.png\" alt=\"image-20221229094601192\"></p>\n<ul>\n<li>两正数加，变负数，正溢（大于机器所能表示的最大数）</li>\n<li>两负数加，变正数，负溢（小于机器所能表示的最小数） </li>\n</ul>\n<p>双符号位：+=00，-=11，01正溢，10负溢</p>\n<h2 id=\"原码乘除\"><a href=\"#原码乘除\" class=\"headerlink\" title=\"原码乘除\"></a>原码乘除</h2><ul>\n<li><p>用原码阵列除法器计算 $x÷y$（注：先乘1个比例因子变成小数）</p>\n<p>$x=11000$，$y=-11111$</p>\n</li>\n<li><p>$[x]_原=[x]_补=011000$，$[|y|]_补=011111$，$[-|y|]_补=100001$</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221230205218283.png\" alt=\"image-20221230205218283\"></p>\n</li>\n</ul>\n<h2 id=\"浮点加减\"><a href=\"#浮点加减\" class=\"headerlink\" title=\"浮点加减\"></a>浮点加减</h2><p>​    $x=0.1101\\times2^{01}$；$y=(-0.1010)\\times2^{11}$，求 $x+y$，$x-y$</p>\n<ul>\n<li>补码 $[x]_补=0001;00.1101$，$[y]_补=0011;11.0110$</li>\n<li>对阶 $00,01-00,11=00,01+11,01=11,10=-2$，$x$ 右移两位，$[x]_补’=00,11;00.0011(01)$</li>\n<li>尾数求和 $00.0011(01)+11.0110=11.1001(01)$</li>\n<li>规格化 符号位和位数最高位应异号，左移1位，阶码减1，$00,10;11.0010(10)$</li>\n<li>舍入 $00,10;11.0011$</li>\n<li>结果为 $x+y=(-0.1101)\\times2^{10}$</li>\n</ul>\n<ul>\n<li>补码 $[x]_补=00,01;00.1101$，$[y]_补=00,11;11.0110$</li>\n<li>$[y]_补$ 按位取反+1，$[-y]_补=00,11;00.1010$</li>\n<li>对阶 $00,01-00,11=00,01+11,01=11,10=-2$，$x$ 右移两位，$[x]_补’=00,11;00.0011(01)$</li>\n<li>尾数求和 $00.0011(01)+00.1010=00.1101(01)$</li>\n<li>规格化 符号位和位数最高位应异号，不需要修改</li>\n<li>舍入 $00,11;00.1101$</li>\n<li>结果为 $x+y=(0.1101)\\times2^{11}$</li>\n</ul>\n<h2 id=\"浮点乘除\"><a href=\"#浮点乘除\" class=\"headerlink\" title=\"浮点乘除\"></a>浮点乘除</h2><ul>\n<li>补码采用双符号位，为了对溢出进行判断，01上溢出，10下溢</li>\n<li>规格化 尾数不为0时，绝对值应大于或等于0.5</li>\n</ul>\n<p>设有浮点数 $x=2^{-5}\\times0.0110011$，$y=2^3\\times(-0.1110010)$，阶码用4位移码表示，尾数(含符号位)用8位补码表示。求。要求用补码完成尾数乘法运算,运算结果尾数保留高8位(含符号位),并用尾数低位字长值处理舍入操作。</p>\n<ul>\n<li>$[x]_浮=11011;0.0110011$，$[y]_浮=00011;1.1110010$</li>\n<li>求阶码和 $11011+00011=11110$（补码形式-2）</li>\n<li>尾数乘法 $0.0110011\\times1.1110010=1.0101101,0110110$</li>\n<li>规格化 左规1位，$1.1011010,1101100$，阶码变为 $11101$（-3）</li>\n<li>舍入 尾数 $1.1011011$</li>\n<li>$[x\\times y]_浮=11101,1.1011011$，真值 $x\\times y=2^{-3}\\times(-0.1011011)$</li>\n</ul>\n<h1 id=\"CH-3-存储器\"><a href=\"#CH-3-存储器\" class=\"headerlink\" title=\"CH 3 存储器\"></a>CH 3 存储器</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1 2 3 4 5 6 7 8 9 10 13 14 19 20 21 23 24</p>\n<p>存储器，大题必考存储容量扩展（选片、片数、容量估算，难度不会超过学习通第7题），必考cache，13/14/15题，概念算法</p></blockquote>\n<ul>\n<li>下述有关存储器的描述中，正确的是（BD）<ul>\n<li>多级存储体系由cache、主存和虚拟存储器构成</li>\n<li>存储保护的目的是：在多用户环境中，既要防止一个用户程序出错而破坏系统软件或其他用户程序，又要防止一个用户访问不是分配给他的主存区，以达到数据安全与保密的要求</li>\n<li>在虚拟存储器中，外存和主存以相同的方式工作，因此允许程序员用比主存空间大得多的外存空间编程</li>\n<li>cache和虚拟存储器这两种存储器管理策略都利用了程序的局部性原理</li>\n</ul>\n</li>\n<li>引入多道程序的目的在于（充分利用CPU，减少CPU等待时间）</li>\n<li>虚拟段页式存储管理方案的特性为（空间浪费小、存储共享容易、存储保护容易、能动态连接）</li>\n<li></li>\n<li><p>某机器中，已知配有一个地址空间为 $0000H-3FFFH$ 的ROM区域。现在再用一个RAM芯片(8K×8)形成40K×16位的RAM区域，起始地为6000H。假设RAM芯片有CS和WE信号控制端。CPU的地址总线为 $A_{15}-A_0$,数据总线为 $D_{15}-D_0$，控制信号为 $R/W$ (读/写)，$\\overline{MREQ}$(访存)，要求：</p>\n<ul>\n<li>画出地址译码方案。</li>\n<li><p>将ROM与RAM同CPU连接。</p>\n</li>\n<li><p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/aa7fffea2f28e1f08bff6dd876a29269.png\" alt=\"img\"  /></p>\n</li>\n</ul>\n</li>\n<li><p>一个组相联cache由64个行组成，每组4行。主存储器包含4K个块，每块128字。请表示内存地址的格式。</p>\n<ul>\n<li>$\\frac{64}{4}=16$ 组，$4K\\times128=2^{19}$，地址19位</li>\n<li>字长 $128=2^7$，低7位块内字地址（块内偏移量）</li>\n<li>组号 $16=2^4$，中间4位组号</li>\n<li>最高8位标签无法使用cache决定</li>\n</ul>\n</li>\n<li><p>有一个处理机，主存容量1MB，字长1B，块大小16B，cache容量64KB，若cache采用直接映射式，请给出两个不同标记的内存地址，它们映射到同一个cache行。</p>\n<ul>\n<li>主存容量1MB，块大小16B，$\\frac{2^{20}}{2^4}=2^{16}$，主存 $2^{16}$ 块</li>\n<li>cache容量64KB，块大小16B，$\\frac{2^{16}}{2^4}=2^{12}$，cache $2^{12}$ 块</li>\n<li>0块，4*1024块，8*1024块，12*1024块 $\\cdots$ 60*1024块都是映射cache第0行</li>\n<li>4位标签（区号），12位行号（区内块号），4位块内字地址</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"CH-4-指令系统\"><a href=\"#CH-4-指令系统\" class=\"headerlink\" title=\"CH 4 指令系统\"></a>CH 4 指令系统</h1><h2 id=\"指令格式分析\"><a href=\"#指令格式分析\" class=\"headerlink\" title=\"指令格式分析\"></a>指令格式分析</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>（课后题3/4/5、6、7/8）</p></blockquote>\n<ul>\n<li><p>指令格式结构如下所示，试分析指令格式及寻址方式特点。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221230105520957.png\" alt=\"image-20221230105520957\"></p>\n<p>64种OP操作码，二地址，RR型，单字长，寄存器寻址</p>\n</li>\n<li><p>指令格式结构如下所示，试分析指令格式及寻址方式特点。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221230105725591.png\" alt=\"image-20221230105725591\"></p>\n<p>64种OP操作码，二地址，RS型，双字长，变址寻址</p>\n</li>\n<li><p>指令格式结构如下所示，试分析指令格式及寻址方式特点。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221230105742304.png\" alt=\"image-20221230105742304\"></p>\n<p>16种OP操作码，8种寻址方式，双操作数</p>\n</li>\n</ul>\n<h2 id=\"寻址方式\"><a href=\"#寻址方式\" class=\"headerlink\" title=\"寻址方式\"></a>寻址方式</h2><p>（变址寄存器，indexing register）</p>\n<ul>\n<li><p>一种单地址指令格式如下所示，其中I为间接特征，X为寻址模式，D为形式地址。I，X，D组成该指令的操作数有效地址E。设R为变址寄存器，$R_1$为基址寄存器，PC为程序计数器，请在下表中第一列位置填入适当的寻址方式名称。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221230105813818.png\" alt=\"image-20221230105813818\"></p>\n<ul>\n<li>直接寻址</li>\n<li>相对寻址</li>\n<li>变址寻址</li>\n<li>基址寻址</li>\n<li>间接寻址</li>\n<li>基址间接寻址</li>\n</ul>\n</li>\n<li><p>某计算机字长为32位，主存容量为64KB，采用单字长单地址指令，共有40条指令。试采用直接、立即、变址、相对四种寻址方式设计指令格式。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/0a2e3e2e294dae89e97f5f389d71b6a1.png\" alt=\"img\"></p>\n</li>\n<li><p>某机字长为32位，主存容量为1MB，单字长指令，有50种操作码，采用寄存器寻址、寄存器间接寻址、立即寻址、直接寻址等方式。CPU中有PC,IR,AR,DR和16个通用寄存器。问：</p>\n<ul>\n<li>指令格式如何安排？</li>\n<li>能否增加其他寻址方式？</li>\n</ul>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/8e6fb3d8ed5f24ab457a53ce72296e7a.png\" alt=\"img\"></p>\n</li>\n</ul>\n<h1 id=\"CH-5-方框图（综合）\"><a href=\"#CH-5-方框图（综合）\" class=\"headerlink\" title=\"CH 5 方框图（综合）\"></a>CH 5 方框图（综合）</h1><ul>\n<li>保存当前正在执行的指令的寄存器是（IR）</li>\n<li>保存当前正在执行的指令地址的寄存器是（AR）</li>\n<li><p>算术逻辑运算结果通常放在（DR）和（通用寄存器）</p>\n</li>\n<li><p>参见图中的数据通路。画出存数指令“STO R1,(R2)”的指令周期流程图，其含义是将寄存器 $R_1$ 的内容传送至 $(R_2)$ 为地址的数存单元中。标出各微操作信号序列。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221230110511812.png\" alt=\"image-20221230110511812\"></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221230114104170.png\" alt=\"image-20221230114104170\"></p>\n</li>\n<li><p>判断以下三组指令中各存在哪种类型的数据相关。</p>\n<ul>\n<li><p>$I_1\\quad LDA\\quad R_1,A$       ；$M(A)\\rightarrow R_1$，$M(A)$ 是存储器单元</p>\n<p>$I_2\\quad ADD\\quad R_2,R_1$    ；$(R_2)+(R_1)\\rightarrow R_2$</p>\n</li>\n<li><p>$I_3\\quad ADD\\quad R_3,R_4$     ；$(R_3)+(R_4)\\rightarrow R_3$</p>\n<p>$I_4\\quad MUL\\quad R_4,R_5$    ；$(R_4)\\times(R_5)\\rightarrow R_4$</p>\n</li>\n<li><p>$I_5\\quad LDA\\quad R_6,B$       ；$M(B)\\rightarrow R_6$，$M(B)$ 是存储器单元</p>\n<p>$I_6\\quad MUL\\quad R_6,R_7$    ；$(R_6)\\times(R_7)\\rightarrow R_6$</p>\n</li>\n<li><p>写后读 RAW</p>\n</li>\n<li><p>读后写 WAR</p>\n</li>\n<li><p>写后写 WAW</p>\n</li>\n</ul>\n</li>\n<li><p>指令流水线有取指(IF)、译码(ID)、执行(EX)、访存(MEM)、写回寄存器堆(WB)五个过程段，共有20条指令连续输入此流水线。</p>\n<ul>\n<li>画出流水处理的时空图，假设时钟周期为100ns。</li>\n<li>求流水线的实际吞吐率（单位时间里执行完毕的指令数）。</li>\n<li>求流水线的加速比。</li>\n<li><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221230204419540.png\" alt=\"image-20221230204419540\"></li>\n<li>$H=\\frac{n}{(K+n-1)\\tau}=\\frac{20}{(5+20-1)\\times100\\times10^{-9}}=8.33\\times10^6$ 条/秒</li>\n<li>$S=\\frac{Ts}{Tp}=\\frac{n\\tau K}{(K+n-1)\\tau}=\\frac{20\\times5}{20+5-1}=4.17$</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"CH-6-总线（选择）\"><a href=\"#CH-6-总线（选择）\" class=\"headerlink\" title=\"CH 6 总线（选择）\"></a>CH 6 总线（选择）</h1><ul>\n<li><p>同步通信之所以比异步通信具有较高的传输频率，是因为同步通信（用一个公共时钟信号进行同步）</p>\n</li>\n<li><p>在集中式总线仲裁中，响应时间最快的方式是（独立请求），（菊花链）方式对电路故障最敏感，（计数器定时查询）方便修改设备优先级策略。</p>\n</li>\n<li><p>采用串行接口进行7位ASCII码传送，带有1位奇校验位、1位起始位和1位停止位，当波特率为9600波特时，字符传送速率为（960）</p>\n<p>$\\frac{9600}{7+1+1+1}=960$</p>\n</li>\n<li><p>系统总线中地址线的功能是（指定主存和I/O设备接口电路的地址）</p>\n</li>\n<li><p>系统总线中控制线的功能是（提供主存、I/O接口设备的控制信号和响应信号）</p>\n</li>\n<li><p>存储总线周期用于对内存读写，I/O总线周期对接口中的端口进行读写</p>\n</li>\n<li><p>PCI 是一个与处理器无关的（高速外围总线），它采用（同步）时序协议和（集中）式仲裁策略，并具有（自动配置）能力。 PCI 总线的基本传输机制是（猝发式 burst-oriented）。利用（桥）可以实现总线间的（猝发式）工作，使所有的存取都按 CPU 的需要出现在总线上。PCI 允许（多条）总线（并行）工作。</p>\n</li>\n<li><p>InfiniBand是一个高性能的（I/O）标准，数据传输率达（30GB/s），它可连接（64000）台服务器，适合于高成本的（较大规模）计算机的系统。</p>\n</li>\n<li><p>PCI总线上有HOST桥、PCILAGACY总线桥、PCIPCI桥。桥在PCI总线体系结构中起着重要作用，它连接两条总线，使彼此间相互通信。桥是一个总线转换部件，可以把一条总线的地址空间映射到另一条总线的地址空间上，从而使系统中任意一个总线主设备都能看到同样的一份地址表。桥可以实现总线间的猝发式传送，可使所有的存取都按CPU的需要出现在总线上。由上可见，以桥连接实现的PCI总线结构具有很好的扩充性和兼容性，允许多条总线并行工作。</p>\n</li>\n<li><p>分布式仲裁不需要中央仲裁器，每个潜在的主方功能模块都有自己的仲裁号和仲裁器。当它们有总线请求时，把它们唯一的仲裁号发送到共享的仲裁总线上，每个仲裁器将仲裁总线上得到的号与自己的号进行比较。如果仲裁总线上的号大，则它的总线请求不予响应，并撤消它的仲裁号。最后，获胜者的仲裁号保留在仲裁总线上，分布式仲裁是以优先级仲裁策略为基础。</p>\n</li>\n<li><p>某总线在一个总线周期中并行传送8字节的信息，假设一个总线周期等于一个总线时钟周期，总线时钟频率为 70MHz，总线带宽是多少MBps？</p>\n<p>$8\\times70=560MBps$</p>\n</li>\n</ul>\n<h1 id=\"CH-7-外设（计算）\"><a href=\"#CH-7-外设（计算）\" class=\"headerlink\" title=\"CH 7 外设（计算）\"></a>CH 7 外设（计算）</h1><ul>\n<li><p>计算机的外围设备是指（除了CPU和内存以外的其他设备）</p>\n</li>\n<li><p>打印机根据印字方式可以分为（击打式）和（非击打式）两大类，在（击打式）打印机中，只有（针型）打印机能打印汉字。</p>\n</li>\n<li><p>某双面磁盘,每面有220道,已知磁盘转速,r=4000r/min,数据传输率为 185000B/s,则磁盘总容量是____MB(结果按四舍五入保留2位小数)。</p>\n<p>$\\frac{185000}{4000/60}\\times2\\times220=1.16$ MB</p>\n</li>\n<li><p>某磁盘存储器转速为 3000r/min,共有4个记录面,每道记录信息为12288B,最小磁道直径为230mm,共有275道。问: </p>\n<ul>\n<li><p>磁盘存储器的存储容量是多少MB?  $12288B\\times275\\times4=12.89$ MB</p>\n</li>\n<li><p>最高位密度是多少字节/mm?</p>\n<p>最高位密度最小磁道半径 $(12288B)/(2\\pi\\times\\frac{230mm}{2})=17B/mm$</p>\n<p>？ 最低位密度最大磁道半径  $(12288B)/(2\\pi\\times(\\frac{230mm}{2}+\\frac{275}{5}))=11.5B/mm$</p>\n</li>\n<li><p>磁盘数据传输率是多少KB/s?  $\\frac{3000}{60}\\times12288=600$ KB/s</p>\n</li>\n<li><p>平均等待时间是多少ms?  $\\frac{1}{2}\\times\\frac{60}{3000}\\times1000=10$ ms</p>\n</li>\n<li><p>磁盘地址格式方案中,柱面号字段多少位?  $2^8&lt;275&lt;2^9$，9位</p>\n</li>\n<li><p>磁盘地址格式方案中,盘面/磁头号多少位?  $2^2=4$ 记录面，2位</p>\n</li>\n<li><p>磁盘地址格式方案中,如果每条磁道按每扇区512B进行格式化,则扇区号多少位?</p>\n<p>$2^4&lt;\\frac{12288B}{512B}=24&lt;2^5$，5位</p>\n</li>\n</ul>\n</li>\n<li><p>己知某磁盘存储器转速为2400r/min,每个记录面道数为200道,平均找道时间为 60ms, 每道存储存量为96KB,求:</p>\n<ul>\n<li><p>磁盘的存取时间(ms)是___；</p>\n<p>存取时间=平均查找时间+平均等待时间 = $60+\\frac{1}{2}\\times\\frac{60}{2400}\\times1000=72.5$ ms</p>\n</li>\n<li><p>数据传输率是___(KB/s)。</p>\n<p>$96\\times\\frac{2400}{60}=3840$ KB/s</p>\n</li>\n</ul>\n</li>\n<li><p>一台活动头磁盘机的盘片组共有20个可用的盘面,每个盘面直径 18in,可供记录部分宽5in,已知:道密度为 100 道/in,位密度为 1000位/in(最内道),并假定各磁道记录的信息位数相同。试问: </p>\n<ul>\n<li><p>盘片组总容量是兆位 (Mb,10^6位)? </p>\n<p>磁盘内径 $\\frac{18}{2}-5=4$ in</p>\n<p>内层磁道周长 $2\\pi R=2\\times3.14\\times4=25.12$ in</p>\n<p>每道信息量 $1000b/in\\times25.12in=25120$ b</p>\n<p>磁盘 $100道/in\\times5in=500$ 道</p>\n<p>盘片组总容量 $20\\times500\\times25120=2.512\\times10^{8}=251.2\\times10^6=251.2$ 兆位</p>\n<p>（注意题目中Mb,10^6位）</p>\n</li>\n<li><p>若要求数据传输率为 1MB/s,磁盘机转速每分钟应是转?</p>\n<p>每道含有信息量 $\\frac{25120}{8}=3140$ B</p>\n<p>$\\frac{1\\times10^6(B/s)}{3140B}=318.5转/s=19108$ 转/min</p>\n</li>\n</ul>\n</li>\n<li><p>有一台磁盘机,其平均找道时间为 30ms,平均旋转等待时间为 10ms,数据传输率为 500B/ms,磁盘机上存放着 1000 件每件 3000B 的数据。现欲把一件件数据取走,更新后再放回原地,假设一次取出或写入所需时间为:T=平均找道时间+平均等待时间+数据传送时间,另外,使用 CPU 更新信息所需的时间为 4ms,并且更新时间同输入输出操作不相重叠。试问: </p>\n<ul>\n<li><p>更新磁盘上全部数据需___秒?</p>\n<p>$[(30\\times10^{-3}+10\\times10^{-3}+\\frac{3000}{500}\\times10^{-3})\\times2+4\\times10^{-3}]\\times1000=96s$</p>\n</li>\n<li><p>若磁盘机旋转速度和数据传输率都提高一倍,更新全部数据需___秒?</p>\n<p>$[(30\\times10^{-3}+5\\times10^{-3}+\\frac{3000}{1000}\\times10^{-3})\\times2+4\\times10^{-3}]\\times1000=80s$</p>\n</li>\n</ul>\n</li>\n<li><p>刷新存储器的重要性能指标是它的带宽。若显示工作方式采用分辦率1024像素X768像素；颜色深度为 24位,帧频(刷新速率)为 72Hz，求:</p>\n<ul>\n<li>刷新存储器的存储容量是MB?  $\\frac{1024\\times768\\times3B}{1024\\times1024}=2.25MB$</li>\n<li>刷新存储器的带宽是MB/s?  $\\frac{1024\\times768\\times3B}{1024\\times1024}\\times72/s=162MB$</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"CH-8-输入-输出系统（选择）\"><a href=\"#CH-8-输入-输出系统（选择）\" class=\"headerlink\" title=\"CH 8 输入/输出系统（选择）\"></a>CH 8 输入/输出系统（选择）</h1><ul>\n<li>如果认为CPU等待设备的状态信号是处于非工作状态（即踏步等待），那么在下面几种主机与设备之间的数据传送中：（程序查询方式）主机与设备是串行工作的；（程序中断方式）主机与设备是并行工作的：（DMA方式）主程序与设备是并行运行的。</li>\n<li>中断向量地址是（中断服务程序入口地址）</li>\n<li>利用微型机制作了对输入数据进行采样处理的系统。在该系统中，每抽取一个输入数据就要中断CPU一次，中断处理程序接收采样的数据，将其放到主存的缓冲区内。该中断处理需时x秒，另一方面缓冲区内每存储n个数据，主程序就将其取出进行处理，这种处理需时y秒。因此该系统可以跟踪到每秒 $\\frac{n}{n\\times x+y}$ 次的中断请求。</li>\n<li>采用DMA方式传送数据时，每传送一个数据就要占用一个（存储周期）的时间。</li>\n<li>通道的功能是：（组织外围设备和内存进行数据传输；控制外围设备），按通道的工作方式分，通道有（选择）通道、（数组多路）通道、（字节多路）通道三种类型。</li>\n<li>下列陈述中正确的是（输入输出操作的最终目的是要实现CPU与外设之间的数据传输）</li>\n<li>Pentium系统有两类中断源：<ul>\n<li>由CPU外部的硬件信号引发的称为（中断），它分为（可屏蔽中断）和（非屏蔽中断）</li>\n<li>由指令引发的称为（异常），其中一种是执行（异常），另一种是（执行软件中断指令）</li>\n</ul>\n</li>\n<li>IEEE 1394是（串行）I/O标准接口，与SCSI（并行）I/O标准接口相比，它具有更高的（数据传输速率），更强的（数据传输实时性），体积（小），连接方便。</li>\n<li>SCSI是系统级（接口），是处于主适配器和智能设备控制器之间的（并行）I/O接口。SCSI-3标准允许SCSI总线上连接的设备由（8）个提高到（16）个，可支持（16）位数据传输。</li>\n</ul>\n","feature":true,"text":"题型15道选择30分 70分综合（7-8道大题） 题型课后题 CH 2 补码定点运算 计算题，大题补码运算（补码加减法，定点加减法） 真值：计算机中用 正负号+绝对值 表示的数。 机器数：计算机中把 符号位和数值 数码化以后的数。 原码：在数值前直接加一符号位的表示法。0正1负，...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Computer","slug":"Computer","count":4,"path":"api/categories/Computer.json"}],"tags":[{"name":"Computer Organization","slug":"Computer-Organization","count":3,"path":"api/tags/Computer-Organization.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A2%98%E5%9E%8B\"><span class=\"toc-text\">题型</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CH-2-%E8%A1%A5%E7%A0%81%E5%AE%9A%E7%82%B9%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">CH 2 补码定点运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E7%A0%81%E5%8A%A0%E5%87%8F%E6%B3%95\"><span class=\"toc-text\">补码加减法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%A2%E5%87%BA%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">溢出判断</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E4%B9%98%E9%99%A4\"><span class=\"toc-text\">原码乘除</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E5%8A%A0%E5%87%8F\"><span class=\"toc-text\">浮点加减</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E4%B9%98%E9%99%A4\"><span class=\"toc-text\">浮点乘除</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CH-3-%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">CH 3 存储器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CH-4-%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">CH 4 指令系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90\"><span class=\"toc-text\">指令格式分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">寻址方式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CH-5-%E6%96%B9%E6%A1%86%E5%9B%BE%EF%BC%88%E7%BB%BC%E5%90%88%EF%BC%89\"><span class=\"toc-text\">CH 5 方框图（综合）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CH-6-%E6%80%BB%E7%BA%BF%EF%BC%88%E9%80%89%E6%8B%A9%EF%BC%89\"><span class=\"toc-text\">CH 6 总线（选择）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CH-7-%E5%A4%96%E8%AE%BE%EF%BC%88%E8%AE%A1%E7%AE%97%EF%BC%89\"><span class=\"toc-text\">CH 7 外设（计算）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CH-8-%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F%EF%BC%88%E9%80%89%E6%8B%A9%EF%BC%89\"><span class=\"toc-text\">CH 8 输入&#x2F;输出系统（选择）</span></a></li></ol>","author":{"name":"Brandon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60676912?s=460&v=4","link":"/","description":"Never back down","socials":{"github":"https://github.com/DjyBrandon","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Brandon_","juejin":"https://juejin.cn/user/541388827538679","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Twitter Architecture 2022","uid":"d80392e6f2f5a5f73efea40e3f8764be","slug":"Twitter Architecture 2022","date":"2022-11-22T08:00:00.000Z","updated":"2023-01-23T00:13:19.097Z","comments":true,"path":"api/articles/Twitter Architecture 2022.json","keywords":null,"cover":"https://pic2.zhimg.com/80/v2-eb3aeb0dfc84db5b64d8ab24fb757891_720w.webp","text":" Twitter 架构中客户端设备通过前端以及一个 TFE（短消息前段），iPone 及 web 使用 GraphQL 语言（简单场景可能 RESTful API，如 Facebook）操作 Federated 存储引擎编排微服务（HTTP 协议及 android 的 TLS 安...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Notes","slug":"Notes","count":1,"path":"api/categories/Notes.json"}],"tags":[{"name":"Architecture","slug":"Architecture","count":1,"path":"api/tags/Architecture.json"}],"author":{"name":"Brandon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60676912?s=460&v=4","link":"/","description":"Never back down","socials":{"github":"https://github.com/DjyBrandon","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Brandon_","juejin":"https://juejin.cn/user/541388827538679","customs":{}}},"feature":true}}
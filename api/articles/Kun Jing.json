{"title":"Kunjing — HBU Competition","uid":"7ffde49d34885cb79e15d49bc1c3d82b","slug":"Kun Jing","date":"2022-10-05T09:01:36.000Z","updated":"2023-01-23T00:09:16.849Z","comments":true,"path":"api/articles/Kun Jing.json","keywords":null,"cover":[],"content":"<h1 id=\"坤竞——HBU竞赛组队匹配系统\"><a href=\"#坤竞——HBU竞赛组队匹配系统\" class=\"headerlink\" title=\"坤竞——HBU竞赛组队匹配系统\"></a>坤竞——HBU竞赛组队匹配系统</h1><p>介绍：帮助河北大学师生营造更好的竞赛氛围，找到志同道合的伙伴，移动端 H5 网页（尽量兼容 PC 端），后续可加入科研方面。</p>\n<p>测试v1.0.0：<a href=\"http://kunjing.brandon777.com（未导入数据，前后端接口暂未接入）\">http://kunjing.brandon777.com（未导入数据，前后端接口暂未接入）</a></p>\n<h1 id=\"1-需求分析\"><a href=\"#1-需求分析\" class=\"headerlink\" title=\"1 需求分析\"></a>1 需求分析</h1><p>​        根据标签进行用户匹配，如：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>性别</strong>：男、女</p>\n<p><strong>专业</strong>：软件工程、网络安全 ···</p>\n<p><strong>正在准备/研究/进行</strong>：挑战杯、互联网+、大创、数模、蓝桥杯、CTF ···</p>\n<p><strong>目标</strong>：挑战杯、互联网+、大创、数模、蓝桥杯、CTF ···</p>\n<p><strong>（最高获奖）等级</strong>：未获奖、校级、省级、国家级</p>\n<p><strong>身份</strong>：大一、大二、大三、大四、研一、研二、研三、博士、副教授、教授、企业</p></blockquote>\n<ol>\n<li>用户信息<ol>\n<li>支持Excel导入学生教务信息（模拟字段）√</li>\n<li>用户去添加/修改标签，标签的分类（要有哪些标签、怎么把标签进行分类）学习方向 挑战杯 / 互联网+ / 大创 ···（未开发完全）</li>\n</ol>\n</li>\n<li>科研组队/竞赛组队<ol>\n<li>创建队伍 √</li>\n<li>加入队伍 √</li>\n<li>解散队伍 √</li>\n<li>在线聊天（未开发)</li>\n<li>一起教室自习（接入智慧教务可视化）</li>\n<li>邀请其他人（未开发）</li>\n</ol>\n</li>\n<li>查询搜索<ol>\n<li>主动搜索：允许用户根据标签去搜索其他用户 √<ol>\n<li>Redis 缓存 √</li>\n</ol>\n</li>\n<li>根据标签查询队伍 √</li>\n</ol>\n</li>\n<li>推荐匹配<ol>\n<li>匹配标签相似学生 √</li>\n<li>匹配指导教师 √</li>\n<li>匹配公司投资 √</li>\n<li>相似度计算算法 + 本地分布式计算 √</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"2-技术选型\"><a href=\"#2-技术选型\" class=\"headerlink\" title=\"2 技术选型\"></a>2 技术选型</h1><h2 id=\"2-1-前端\"><a href=\"#2-1-前端\" class=\"headerlink\" title=\"2.1 前端\"></a>2.1 前端</h2><ol>\n<li>Vue 3 开发框架（提高页面开发的效率）</li>\n<li>TypeScript（JavaScript 增强版）</li>\n<li>Vant UI（基于 Vue 的移动端组件库）（React 版 Zent）</li>\n<li>Vite 3（打包工具，快！）</li>\n<li>Nginx 来单机部署</li>\n</ol>\n<h2 id=\"2-2-后端\"><a href=\"#2-2-后端\" class=\"headerlink\" title=\"2.2 后端\"></a>2.2 后端</h2><ol>\n<li>Java 编程语言 + SpringBoot 框架</li>\n<li>SpringMVC + MyBatis + MyBatis Plus（提高开发效率）</li>\n<li>MySQL 数据库</li>\n<li>分布式 Session 登录</li>\n<li>数据查询 Redis 缓存</li>\n<li>缓存预热—定时任务</li>\n<li>控制定时任务—锁 + 分布式锁</li>\n<li>Swagger + Knife4j 接口文档</li>\n</ol>\n<h1 id=\"3-数据库表设计及选择\"><a href=\"#3-数据库表设计及选择\" class=\"headerlink\" title=\"3 数据库表设计及选择\"></a>3 数据库表设计及选择</h1><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">create\ndatabase if not exists kunjing;\n\nuse\nkunjing;</code></pre>\n<h2 id=\"3-1-用户表-user\"><a href=\"#3-1-用户表-user\" class=\"headerlink\" title=\"3.1 用户表 user\"></a>3.1 用户表 user</h2><h3 id=\"3-1-1-字段阐释\"><a href=\"#3-1-1-字段阐释\" class=\"headerlink\" title=\"3.1.1 字段阐释\"></a>3.1.1 字段阐释</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字段</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">用户 id</td>\n<td style=\"text-align:center\">bigint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">username</td>\n<td style=\"text-align:center\">昵称</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">userAccount</td>\n<td style=\"text-align:center\">登录账号</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">avatarUrl</td>\n<td style=\"text-align:center\">用户头像</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gender</td>\n<td style=\"text-align:center\">性别</td>\n<td style=\"text-align:center\">tinyint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">userPassword</td>\n<td style=\"text-align:center\">密码</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">profile</td>\n<td style=\"text-align:center\">个人简介</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">phone</td>\n<td style=\"text-align:center\">电话</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">email</td>\n<td style=\"text-align:center\">邮箱</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">userStatus</td>\n<td style=\"text-align:center\">状态 0 - 正常 1 - 封号</td>\n<td style=\"text-align:center\">int</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createTime</td>\n<td style=\"text-align:center\">创建时间</td>\n<td style=\"text-align:center\">datetime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateTime</td>\n<td style=\"text-align:center\">更新时间</td>\n<td style=\"text-align:center\">datetime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isDelete</td>\n<td style=\"text-align:center\">是否删除</td>\n<td style=\"text-align:center\">tinyint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">userRole</td>\n<td style=\"text-align:center\">用户角色 0 - 普通用户 1 - 管理员</td>\n<td style=\"text-align:center\">int</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">planetCode</td>\n<td style=\"text-align:center\">星球编号</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tags</td>\n<td style=\"text-align:center\">标签 json 列表</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-1-2-建表语句\"><a href=\"#3-1-2-建表语句\" class=\"headerlink\" title=\"3.1.2 建表语句\"></a>3.1.2 建表语句</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">create table user\n(\n    username     varchar(256)                       null comment &#39;用户昵称&#39;,\n    id           bigint auto_increment              comment &#39;id&#39; primary key,\n    userAccount  varchar(256)                       null comment &#39;账号&#39;,\n    avatarUrl    varchar(1024)                      null comment &#39;用户头像&#39;,\n    gender       tinyint                            null comment &#39;性别&#39;,\n    userPassword varchar(512)                       not null comment &#39;密码&#39;,\n    profile      varchar(512)                       null comment &#39;个人简介&#39;,\n    phone        varchar(128)                       null comment &#39;电话&#39;,\n    email        varchar(512)                       null comment &#39;邮箱&#39;,\n    userStatus   int      default 0                 not null comment &#39;状态 0 - 正常&#39;,\n    createTime   datetime default CURRENT_TIMESTAMP null comment &#39;创建时间&#39;,\n    updateTime   datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP,\n    isDelete     tinyint  default 0                 not null comment &#39;是否删除&#39;,\n    userRole     int      default 0                 not null comment &#39;用户角色 0 - 普通用户 1 - 管理员&#39;,\n    planetCode   varchar(512)                       null comment &#39;星球编号&#39;,\n    tags         varchar(1024)                      null comment &#39;标签 json 列表&#39;\n)\n    comment &#39;用户&#39;;</code></pre>\n<h2 id=\"3-2-队伍表-team\"><a href=\"#3-2-队伍表-team\" class=\"headerlink\" title=\"3.2 队伍表 team\"></a>3.2 队伍表 team</h2><h3 id=\"3-1-1-字段阐释-1\"><a href=\"#3-1-1-字段阐释-1\" class=\"headerlink\" title=\"3.1.1 字段阐释\"></a>3.1.1 字段阐释</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字段</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">主键</td>\n<td style=\"text-align:center\">bigint</td>\n<td style=\"text-align:center\">最简单、连续，放 url 上比较简短，但缺点是爬虫</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-1-2-建表语句-1\"><a href=\"#3-1-2-建表语句-1\" class=\"headerlink\" title=\"3.1.2 建表语句\"></a>3.1.2 建表语句</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">create table team\n(\n    id              bigint auto_increment               comment &#39;id&#39; primary key,\n    name            varchar(256)                        not null comment &#39;队伍名称&#39;,\n    avatarUrl       varchar(1024)                       null comment &#39;用户头像&#39;,\n    description     varchar(1024)                       null comment &#39;描述&#39;,\n    maxNum          int      default 1                  not null comment &#39;最大人数&#39;,\n    expireTime      datetime                            null comment &#39;过期时间&#39;,\n    userId          bigint                              comment &#39;用户id&#39;,\n    status          int      default 0                  not null comment &#39;0 - 公开，1 - 私有，2 - 加密&#39;,\n    password        varchar(512)                        null comment &#39;密码&#39;,\n    createTime      datetime default CURRENT_TIMESTAMP  null comment &#39;创建时间&#39;,\n    updateTime      datetime default CURRENT_TIMESTAMP  null on update CURRENT_TIMESTAMP,\n    isDelete        tinyint  default 0                  not null comment &#39;是否删除&#39;\n)\n    comment &#39;队伍&#39;;</code></pre>\n<h2 id=\"3-3-用户-队伍表-user-team\"><a href=\"#3-3-用户-队伍表-user-team\" class=\"headerlink\" title=\"3.3 用户-队伍表 user_team\"></a>3.3 用户-队伍表 user_team</h2><h3 id=\"3-1-1-字段阐释-2\"><a href=\"#3-1-1-字段阐释-2\" class=\"headerlink\" title=\"3.1.1 字段阐释\"></a>3.1.1 字段阐释</h3><h3 id=\"3-1-2-建表语句-2\"><a href=\"#3-1-2-建表语句-2\" class=\"headerlink\" title=\"3.1.2 建表语句\"></a>3.1.2 建表语句</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">create table user_team\n(\n    id              bigint auto_increment               comment &#39;id&#39; primary key,\n    userId          bigint                              comment &#39;用户id&#39;,\n    teamId          bigint                              comment &#39;队伍id&#39;,\n    joinTime        datetime                            null comment &#39;加入时间&#39;,\n    createTime      datetime default CURRENT_TIMESTAMP  null comment &#39;创建时间&#39;,\n    updateTime      datetime default CURRENT_TIMESTAMP  null on update CURRENT_TIMESTAMP,\n    isDelete        tinyint  default 0                  not null comment &#39;是否删除&#39;\n)\n    comment &#39;用户队伍关系&#39;;</code></pre>\n<p>两个关系：</p>\n<ol>\n<li>用户加了哪些队伍？</li>\n<li>队伍有哪些用户？</li>\n</ol>\n<p>方式：</p>\n<ol>\n<li>建立用户 - 队伍关系表 teamId userId（便于修改，查询性能高一点，可以选择这个，不用全表遍历）</li>\n<li>用户表补充已加入的队伍字段，队伍表补充已加入的用户字段（便于查询，不用写多对多的代码，可以直接根据队伍查用户、根据用户查队伍）</li>\n</ol>\n<h2 id=\"3-4-标签表（分类表）（并未选择）\"><a href=\"#3-4-标签表（分类表）（并未选择）\" class=\"headerlink\" title=\"3.4 标签表（分类表）（并未选择）\"></a>3.4 标签表（分类表）（并未选择）</h2><p>使用标签比分类更灵活。</p>\n<h3 id=\"3-4-1-字段阐释\"><a href=\"#3-4-1-字段阐释\" class=\"headerlink\" title=\"3.4.1 字段阐释\"></a>3.4.1 字段阐释</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字段</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">主键</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tagName</td>\n<td style=\"text-align:center\">标签名</td>\n<td style=\"text-align:center\">varchar</td>\n<td style=\"text-align:center\">非空（必须唯一，唯一索引）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">userId</td>\n<td style=\"text-align:center\">上传标签的用户</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">如果要根据 userId 查已上传标签的话，最好加上，普通索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">parentId</td>\n<td style=\"text-align:center\">父标签 id</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">查询所有标签，并且把标签分好组：按父标签 id 分组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isParent</td>\n<td style=\"text-align:center\">是否为父标签</td>\n<td style=\"text-align:center\">tinyint</td>\n<td style=\"text-align:center\">0 - 不是父标签、1 - 父标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createTime</td>\n<td style=\"text-align:center\">创建时间</td>\n<td style=\"text-align:center\">datetime</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateTime</td>\n<td style=\"text-align:center\">更新时间</td>\n<td style=\"text-align:center\">datetime</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isDelete</td>\n<td style=\"text-align:center\">是否删除</td>\n<td style=\"text-align:center\">tinyint</td>\n<td style=\"text-align:center\">0、1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-4-2-建表语句\"><a href=\"#3-4-2-建表语句\" class=\"headerlink\" title=\"3.4.2 建表语句\"></a>3.4.2 建表语句</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">create table tag\n(\n    id\t\t\tbigint auto_increment comment &#39;id&#39;  primary key,\n    tagName\t\tvarchar(256)\t\t\t\t\t\tnull comment &#39;标签名称&#39;,\n    userId\t\tbigint\t\t\t\t\t\t\t\tnull comment &#39;用户id&#39;,\n    parentId\tbigint\t\t\t\t\t\t\t\tnull comment &#39;父标签id&#39;,\n    isParent\ttinyint\t\t\t\t\t\t\t\tnull comment &#39;0 - 不是父标签，1 - 父标签&#39;,\n    createTime\tdatetime default CURRENT_TIMESTAMP\tnull comment &#39;创建时间&#39;,\n    updateTime\tdatetime default CURRENT_TIMESTAMP\tnull on update CURRENT_TIMESTAMP,\n    isDelete\ttinyint  default 0\t\t\t\t\tnot null comment &#39;是否删除&#39;,\n    constraint uniIdx_tagName unique (tagName)\n)\n    comment &#39;标签&#39;;\ncreate index idx_userId on tag (userId);</code></pre>\n<h2 id=\"3-5-查询方法\"><a href=\"#3-5-查询方法\" class=\"headerlink\" title=\"3.5 查询方法\"></a>3.5 查询方法</h2><p>由于数据量并不大仅为万级，故本项目选择第一种</p>\n<ol>\n<li><p>直接在用户表补充 tags 字段，<strong>[‘挑战杯’, ‘男’] 存 json 字符串 </strong> </p>\n<ul>\n<li>优点：查询方便、不用新建关联表，标签是用户的固有属性（除了该系统、其他系统可能要用到）节省开发成本</li>\n<li><strong>查询用户列表，查关系表拿到这 100 个用户有的所有标签 id，再根据标签 id 去查标签表。</strong></li>\n<li>哪怕性能低，可以用缓存。</li>\n<li>缺点：用户表多一列，会有冗余。</li>\n</ul>\n</li>\n<li>加一个关联表，记录用户和标签的关系<ul>\n<li>关联表的应用场景：查询灵活，可以正查反查</li>\n<li>缺点：要多建一个表、多维护一个表</li>\n<li>重点：企业大项目开发中尽量减少关联查询，很影响扩展性，而且会影响查询性能</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"4-前端项目初始化\"><a href=\"#4-前端项目初始化\" class=\"headerlink\" title=\"4 前端项目初始化\"></a>4 前端项目初始化</h1><h2 id=\"4-1-前端引入\"><a href=\"#4-1-前端引入\" class=\"headerlink\" title=\"4.1 前端引入\"></a>4.1 前端引入</h2><p>用脚手架初始化项目</p>\n<ul>\n<li>Vue CLI <a href=\"https://cli.vuejs.org/zh/\">https://cli.vuejs.org/zh/</a></li>\n<li><strong>Vite 脚手架</strong> ：<a href=\"https://vitejs.cn/guide/#scaffolding-your-first-vite-project\">https://vitejs.cn/guide/#scaffolding-your-first-vite-project</a></li>\n</ul>\n<p>整合组件库 Vant：</p>\n<ul>\n<li>安装 Vant npm i vant</li>\n<li>// Vant 2 按需引入 npm i vite-plugin-style-import@1.4.1 -D</li>\n<li>Vant 3 按需引入插件 npm i unplugin-vue-components -D</li>\n</ul>\n<h2 id=\"4-2-前端主页设计\"><a href=\"#4-2-前端主页设计\" class=\"headerlink\" title=\"4.2 前端主页设计\"></a>4.2 前端主页设计</h2><ul>\n<li><p>导航条：展示当前页面名称</p>\n</li>\n<li><p>主页搜索框 =&gt; 搜索页 =&gt; 搜索结果页（标签筛选页）</p>\n</li>\n<li><p>内容</p>\n</li>\n<li><p>tab 栏：</p>\n<ul>\n<li><p>主页（推荐页 + <strong>广告</strong> ）</p>\n<ul>\n<li>搜索框</li>\n<li>banner</li>\n<li>推荐信息流</li>\n</ul>\n</li>\n<li><p>队伍页</p>\n</li>\n<li><p>用户页（消息 - 暂时考虑发邮件）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-3-前端整合路由\"><a href=\"#4-3-前端整合路由\" class=\"headerlink\" title=\"4.3 前端整合路由\"></a>4.3 前端整合路由</h2><ul>\n<li>Vue-Router：<a href=\"https://router.vuejs.org/zh/guide/#html，直接看官方文档引入\">https://router.vuejs.org/zh/guide/#html，直接看官方文档引入</a></li>\n<li>Vue-Router 根据不同的 url 来展示不同的页面（组件），不用自己写 if / else</li>\n<li>路由配置影响整个项目，建议单独用 config 目录、单独的配置文件去集中定义和管理。</li>\n<li>有些组件库可能自带了和 Vue-Router 的整合，所以尽量先看组件文档、省去自己写的时间。</li>\n</ul>\n<h2 id=\"4-4-前端页面跳转传值\"><a href=\"#4-4-前端页面跳转传值\" class=\"headerlink\" title=\"4.4 前端页面跳转传值\"></a>4.4 前端页面跳转传值</h2><ol>\n<li>query =&gt; url searchParams，url 后附加参数，传递的值长度有限</li>\n<li>vuex（全局状态管理），搜索页将关键词塞到状态中，搜索结果页从状态取值</li>\n</ol>\n<h2 id=\"4-5-前端不同页面传递数据\"><a href=\"#4-5-前端不同页面传递数据\" class=\"headerlink\" title=\"4.5 前端不同页面传递数据\"></a>4.5 前端不同页面传递数据</h2><ol>\n<li><strong>url querystring（xxx?id=1）</strong> 比较适用于页面跳转</li>\n<li><strong>url（/team/:id，xxx/1）</strong></li>\n<li>hash (/team#1)</li>\n<li>localStorage</li>\n<li><strong>context（全局变量，同页面或整个项目要访问公共变量）</strong></li>\n</ol>\n<h1 id=\"5-开发后端接口\"><a href=\"#5-开发后端接口\" class=\"headerlink\" title=\"5 开发后端接口\"></a>5 开发后端接口</h1><h2 id=\"5-1-搜索标签\"><a href=\"#5-1-搜索标签\" class=\"headerlink\" title=\"5.1 搜索标签\"></a>5.1 搜索标签</h2><ol>\n<li>允许用户传入多个标签，多个标签都存在才搜索出来 and。like ‘%挑战杯%’ and like ‘%互联网+%’。</li>\n<li>允许用户传入多个标签，有任何一个标签存在就能搜索出来 or。like ‘%挑战杯%’ or like ‘%互联网+%’</li>\n</ol>\n<p>两种方式：</p>\n<ol>\n<li>SQL 查询（实现简单，可以通过拆分查询进一步优化）</li>\n<li>内存查询（灵活，可以通过并发进一步优化）</li>\n</ol>\n<ul>\n<li><p>如果参数可以分析，根据用户的参数去选择查询方式，比如标签数</p>\n</li>\n<li><p>如果参数不可分析，并且数据库连接足够、内存空间足够，可以并发同时查询，谁先返回用谁。</p>\n</li>\n<li>还可以 SQL 查询与内存计算相结合，比如先用 SQL 过滤掉部分 tag</li>\n</ul>\n<p>可通过实际测试来分析哪种查询比较快，数据量大的时候验证效果更明显。</p>\n<h2 id=\"5-2-解析-JSON-字符串\"><a href=\"#5-2-解析-JSON-字符串\" class=\"headerlink\" title=\"5.2 解析 JSON 字符串\"></a>5.2 解析 JSON 字符串</h2><ul>\n<li>序列化：java对象转成 json</li>\n<li>反序列化：把 json 转为 java 对象</li>\n</ul>\n<p>java  json 序列化库：</p>\n<ol>\n<li><p><strong>gson</strong>（google 的）</p>\n</li>\n<li><p>fastjson alibaba（ali 出品，快，但是漏洞太多）</p>\n</li>\n<li><p>jackson</p>\n</li>\n<li><p>kryo</p>\n</li>\n</ol>\n<h2 id=\"5-2-用户中心整合\"><a href=\"#5-2-用户中心整合\" class=\"headerlink\" title=\"5.2 用户中心整合\"></a>5.2 用户中心整合</h2><p>用户中心（<a href=\"http://www.brandon777.com)来集中提供用户的检索、操作、注册、登录、鉴权\">http://www.brandon777.com)来集中提供用户的检索、操作、注册、登录、鉴权</a></p>\n<ol>\n<li>前端整合路由</li>\n<li>前端开发（搜索页面、用户信息页、用户信息修改页）</li>\n<li>后端整合 Swagger + Knife4j 接口文档 </li>\n<li>存量用户信息导入及同步（爬虫或导入Excel）</li>\n</ol>\n<h2 id=\"5-3-后端整合-Swagger-Knife4j-接口文档\"><a href=\"#5-3-后端整合-Swagger-Knife4j-接口文档\" class=\"headerlink\" title=\"5.3 后端整合 Swagger + Knife4j 接口文档\"></a>5.3 后端整合 Swagger + Knife4j 接口文档</h2><h3 id=\"5-3-1-接口文档说明\"><a href=\"#5-3-1-接口文档说明\" class=\"headerlink\" title=\"5.3.1 接口文档说明\"></a>5.3.1 接口文档说明</h3><p>什么是接口文档？写接口信息的文档，每条接口包括：</p>\n<ul>\n<li>请求参数</li>\n<li>响应参数<ul>\n<li>错误码</li>\n</ul>\n</li>\n<li>接口地址</li>\n<li>接口名称</li>\n<li>请求类型</li>\n<li>请求格式</li>\n<li>备注</li>\n</ul>\n<h3 id=\"5-3-2-接口文档作用\"><a href=\"#5-3-2-接口文档作用\" class=\"headerlink\" title=\"5.3.2 接口文档作用\"></a>5.3.2 接口文档作用</h3><ul>\n<li>有个书面内容（背书或者归档），便于大家参考和查阅，便于 <strong>沉淀和维护</strong> ，拒绝口口相传</li>\n<li>接口文档便于前端和后端开发对接，前后端联调的 <strong>介质</strong> 。后端 =&gt; 接口文档 &lt;= 前端</li>\n<li>好的接口文档支持在线调试、在线测试，可以作为工具提高我们的开发测试效率</li>\n</ul>\n<h3 id=\"5-3-3-接口文档实现\"><a href=\"#5-3-3-接口文档实现\" class=\"headerlink\" title=\"5.3.3 接口文档实现\"></a>5.3.3 接口文档实现</h3><ul>\n<li>手写（比如腾讯文档、Markdown 笔记）</li>\n<li>自动化接口文档生成：自动根据项目代码生成完整的文档或在线调试的网页。Swagger，Postman（侧重接口管理）（国外）；apifox、apipost、eolink（国产）</li>\n</ul>\n<h3 id=\"5-3-4-接口文档技巧\"><a href=\"#5-3-4-接口文档技巧\" class=\"headerlink\" title=\"5.3.4 接口文档技巧\"></a>5.3.4 接口文档技巧</h3><p>Swagger 原理：</p>\n<ol>\n<li>引入依赖（Swagger 或 Knife4j：<a href=\"https://doc.xiaominfo.com/knife4j/documentation/get_start.html）\">https://doc.xiaominfo.com/knife4j/documentation/get_start.html）</a></li>\n<li>自定义 Swagger 配置类</li>\n<li>定义需要生成接口文档的代码位置（Controller）</li>\n<li>千万注意：线上环境不要把接口暴露出去！！！可以通过在 SwaggerConfig 配置文件开头加上 <code>@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)</code> 限定配置仅在部分环境开启</li>\n<li>启动即可</li>\n<li>可以通过在 controller 方法上添加 @Api、@ApiImplicitParam(name = “name”,value = “姓名”,required = true)    @ApiOperation(value = “向客人问好”) 等注解来自定义生成的接口描述信息</li>\n</ol>\n<p>如果 springboot version &gt;= 2.6，需要添加如下配置：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  mvc:\n  \tpathmatch:\n      matching-strategy: ANT_PATH_MATCHER</code></pre>\n<h2 id=\"5-4-模拟教务学生信息\"><a href=\"#5-4-模拟教务学生信息\" class=\"headerlink\" title=\"5.4 模拟教务学生信息\"></a>5.4 模拟教务学生信息</h2><ol>\n<li>从 excel 中导入全量用户数据，<strong>判重</strong> 。 easy excel：<a href=\"https://alibaba-easyexcel.github.io/index.html\">https://alibaba-easyexcel.github.io/index.html</a></li>\n<li>抓取写了自我介绍的同学信息，提取出用户昵称、用户唯一 id、自我介绍信息</li>\n<li>从自我介绍中提取信息，然后写入到数据库中</li>\n</ol>\n<p><strong>Easy Excel</strong></p>\n<p>两种读对象的方式：</p>\n<ol>\n<li>确定表头：建立对象，和表头形成映射关系</li>\n<li>不确定表头：每一行数据映射为 Map<String, Object></li>\n</ol>\n<p>两种读取模式：</p>\n<ol>\n<li>监听器：先创建监听器、在读取文件时绑定监听器。单独抽离处理逻辑，代码清晰易于维护；一条一条处理，适用于数据量大的场景。</li>\n<li>同步读：无需创建监听器，一次性获取完整数据。方便简单，但是数据量大时会有等待时常，也可能内存溢出。</li>\n</ol>\n<h1 id=\"6-Session-共享\"><a href=\"#6-Session-共享\" class=\"headerlink\" title=\"6 Session 共享\"></a>6 Session 共享</h1><ul>\n<li>单机登录改为分布式 session 登录。</li>\n<li>种 session 的时候注意范围，cookie.domain</li>\n<li>比如两个域名：<ul>\n<li>aaa.brandon777.com</li>\n<li>bbb.brandon777.com</li>\n</ul>\n</li>\n<li>如果要共享 cookie，可以种一个更高层的公共域名，比如 brandon777.com</li>\n</ul>\n<h2 id=\"6-1-Session-共享存储\"><a href=\"#6-1-Session-共享存储\" class=\"headerlink\" title=\"6.1 Session 共享存储\"></a>6.1 Session 共享存储</h2><ul>\n<li>服务器 A 登录后，请求发到服务器 B，不认识该用户。</li>\n<li>用户在 A 登录，所以 session（用户登录信息）存在了 A 上</li>\n<li>结果请求 B 时，B 没有用户信息，所以不认识。</li>\n</ul>\n<p><img src=\"https://qiniuyun.code-nav.cn/img/image-20220612234247152.png\" style=\"zoom:50%;\" /></p>\n<ul>\n<li>解决方案：<strong>共享存储</strong> ，而不是把数据放到单台服务器的内存中</li>\n</ul>\n<p><img src=\"https://qiniuyun.code-nav.cn/img/image-20220612234335539.png\" style=\"zoom: 50%;\" /></p>\n<h2 id=\"6-2-Session-共享实现\"><a href=\"#6-2-Session-共享实现\" class=\"headerlink\" title=\"6.2 Session 共享实现\"></a>6.2 Session 共享实现</h2><h3 id=\"6-2-1-原理\"><a href=\"#6-2-1-原理\" class=\"headerlink\" title=\"6.2.1 原理\"></a>6.2.1 原理</h3><p>如何共享存储？</p>\n<ol>\n<li>Redis（基于内存的 K / V 数据库）此处选择 Redis，因为用户信息读取 / 是否登录的判断极其<strong>频繁</strong> ，Redis 基于内存，读写性能很高，简单的数据单机 qps 5w - 10w</li>\n<li>MySQL </li>\n<li>文件服务器 ceph</li>\n</ol>\n<h3 id=\"6-2-2-实现\"><a href=\"#6-2-2-实现\" class=\"headerlink\" title=\"6.2.2 实现\"></a>6.2.2 实现</h3><ol>\n<li><p>安装 Redis</p>\n<p>官网：<a href=\"https://redis.io/\">https://redis.io/</a></p>\n<p>redis 管理工具 quick redis：<a href=\"https://quick123.net/\">https://quick123.net/</a></p>\n</li>\n</ol>\n<ol>\n<li>引入 redis，能够操作 redis：</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-data-redis --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.6.4&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n<ol>\n<li>引入 spring-session 和 redis 的整合，使得自动将 session 存储到 redis 中：</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.session&#x2F;spring-session-data-redis --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.session&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-session-data-redis&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.6.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n<ol>\n<li><p>修改 spring-session 存储配置 <code>spring.session.store-type</code></p>\n<p>默认是 none，表示存储在单台服务器</p>\n<p>store-type: redis，表示从 redis 读写 session</p>\n</li>\n</ol>\n<ul>\n<li>JWT 的优缺点：<a href=\"https://zhuanlan.zhihu.com/p/108999941\">https://zhuanlan.zhihu.com/p/108999941</a></li>\n</ul>\n<h1 id=\"7-主页开发\"><a href=\"#7-主页开发\" class=\"headerlink\" title=\"7 主页开发\"></a>7 主页开发</h1><ul>\n<li>最简单：直接 list 列表</li>\n<li>模拟 100 万个用户，再去查询</li>\n</ul>\n<h2 id=\"7-1-导入数据\"><a href=\"#7-1-导入数据\" class=\"headerlink\" title=\"7.1 导入数据\"></a>7.1 导入数据</h2><ol>\n<li><p>用可视化界面：适合一次性导入、数据量可控</p>\n</li>\n<li><p>写程序：for 循环，分批写入（可以用接口来控制）<strong>要保证可控、幂等，注意线上环境和测试环境是有区别的</strong></p>\n<p>导入 1000 万条，for i 100w</p>\n</li>\n<li><p>执行 SQL 语句：适用于小数据量</p>\n</li>\n</ol>\n<h2 id=\"7-2-编写一次性任务\"><a href=\"#7-2-编写一次性任务\" class=\"headerlink\" title=\"7.2 编写一次性任务\"></a>7.2 编写一次性任务</h2><p>for 循环插入数据的问题：</p>\n<ol>\n<li>建立和释放数据库链接（批量查询解决）</li>\n<li>for 循环是绝对线性的（并发）</li>\n</ol>\n<ul>\n<li>并发要注意执行的先后顺序无所谓，不要用到非并发类的集合</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private ExecutorService executorService &#x3D; new ThreadPoolExecutor(16, 1000, 10000, TimeUnit.MINUTES, new ArrayBlockingQueue&lt;&gt;(10000));</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; CPU 密集型：分配的核心线程数 &#x3D; CPU - 1\n&#x2F;&#x2F; IO 密集型：分配的核心线程数可以大于 CPU 核数</code></pre>\n<ul>\n<li>数据库慢可预先把数据查出来，放到一个更快读取的地方，不用再查数据库了。（缓存）</li>\n<li>预加载缓存，定时更新缓存。（定时任务）</li>\n<li>分布式锁：控制同一时间只有一台机器去执行定时任务，其他机器不用重复执行了</li>\n</ul>\n<h1 id=\"8-数据查询慢-缓存\"><a href=\"#8-数据查询慢-缓存\" class=\"headerlink\" title=\"8 数据查询慢-缓存\"></a>8 数据查询慢-缓存</h1><p>用缓存：提前把数据取出来保存好（通常保存到读写更快的介质，比如内存），就可以更快地读写。</p>\n<h2 id=\"8-1-缓存的实现\"><a href=\"#8-1-缓存的实现\" class=\"headerlink\" title=\"8.1 缓存的实现\"></a>8.1 缓存的实现</h2><ul>\n<li>Redis（分布式缓存）</li>\n<li>memcached（分布式）</li>\n<li>Etcd（云原生架构的一个分布式存储，<strong>存储配置</strong>，扩容能力）</li>\n</ul>\n<hr>\n<ul>\n<li><p>ehcache（单机）</p>\n</li>\n<li><p>本地缓存（Java 内存 Map）</p>\n</li>\n<li>Caffeine（Java 内存缓存，高性能）</li>\n<li>Google Guava</li>\n</ul>\n<h2 id=\"8-2-Redis\"><a href=\"#8-2-Redis\" class=\"headerlink\" title=\"8.2 Redis\"></a>8.2 Redis</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>NoSQL 数据库</p></blockquote>\n<ul>\n<li>key - value 存储系统（区别于 MySQL，他存储的是键值对）</li>\n</ul>\n<h3 id=\"8-2-1-Redis-数据结构\"><a href=\"#8-2-1-Redis-数据结构\" class=\"headerlink\" title=\"8.2.1 Redis 数据结构\"></a>8.2.1 Redis 数据结构</h3><ul>\n<li>String 字符串类型： name: “Brandon”</li>\n<li>List 列表：names: [“Brandon”, “Sarbr”, “Brandon”]</li>\n<li>Set 集合：names: [“Brandon”, “Sarbr”]（值不能重复）</li>\n<li>Hash 哈希：nameAge: {  “Brandon”: 1, “Sarbr”: 2 }</li>\n<li>Zset 集合：names: {  Brandon- 9,   Sarbr- 12  }（适合做排行榜）</li>\n</ul>\n<hr>\n<ul>\n<li>bloomfilter（布隆过滤器，主要从大量的数据中快速过滤值，比如邮件黑名单拦截）</li>\n<li>geo（计算地理位置）</li>\n<li>hyperloglog（pv / uv）</li>\n<li>pub / sub（发布订阅，类似消息队列）</li>\n<li>BitMap （1001010101010101010101010101）</li>\n</ul>\n<h3 id=\"8-2-2-自定义序列化\"><a href=\"#8-2-2-自定义序列化\" class=\"headerlink\" title=\"8.2.2 自定义序列化\"></a>8.2.2 自定义序列化</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.brandon.kunjing.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.RedisSerializer;\n\n@Configuration\npublic class RedisTemplateConfig &#123;\n\n    @Bean\n    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory) &#123;\n        RedisTemplate&lt;String, Object&gt; redisTemplate &#x3D; new RedisTemplate&lt;&gt;();\n        redisTemplate.setConnectionFactory(connectionFactory);\n        redisTemplate.setKeySerializer(RedisSerializer.string());\n        return redisTemplate;\n    &#125;\n&#125;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>引入一个库时，先写测试类</p></blockquote>\n<h2 id=\"8-3-Java-里的实现方式\"><a href=\"#8-3-Java-里的实现方式\" class=\"headerlink\" title=\"8.3 Java 里的实现方式\"></a>8.3 Java 里的实现方式</h2><h3 id=\"8-3-1-Spring-Data-Redis（推荐）\"><a href=\"#8-3-1-Spring-Data-Redis（推荐）\" class=\"headerlink\" title=\"8.3.1 Spring Data Redis（推荐）\"></a>8.3.1 Spring Data Redis（推荐）</h3><p>Spring Data：通用的数据访问框架，定义了一组 <strong>增删改查</strong> 的接口</p>\n<p>mysql、redis、jpa</p>\n<p><a href=\"https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis\">spring-data-redis</a></p>\n<p>1）引入</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.6.4&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n<p>2）配置 Redis 地址</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  # redis 配置\n  redis:\n    port: 6379\n    host: localhost\n    database: 0</code></pre>\n<h3 id=\"8-3-2-Jedis\"><a href=\"#8-3-2-Jedis\" class=\"headerlink\" title=\"8.3.2 Jedis\"></a>8.3.2 Jedis</h3><ul>\n<li>独立于 Spring 操作 Redis 的 Java 客户端</li>\n<li>要配合 Jedis Pool 使用</li>\n</ul>\n<h3 id=\"8-3-3-Lettuce\"><a href=\"#8-3-3-Lettuce\" class=\"headerlink\" title=\"8.3.3 Lettuce\"></a>8.3.3 Lettuce</h3><ul>\n<li><strong>高阶</strong> 的操作 Redis 的 Java 客户端</li>\n<li>异步、连接池</li>\n</ul>\n<h3 id=\"8-3-4-Redisson\"><a href=\"#8-3-4-Redisson\" class=\"headerlink\" title=\"8.3.4 Redisson\"></a>8.3.4 Redisson</h3><ul>\n<li>分布式操作 Redis 的 Java 客户端，像在使用本地的集合一样操作 Redis（分布式 Redis 数据网格）</li>\n</ul>\n<h3 id=\"8-3-5-JetCache\"><a href=\"#8-3-5-JetCache\" class=\"headerlink\" title=\"8.3.5 JetCache\"></a>8.3.5 JetCache</h3><p>对比</p>\n<ol>\n<li>如果项目用的是 Spring，并且没有过多的定制化要求，可以用 Spring Data Redis，最方便</li>\n<li>如果项目用的不是 Spring，并且追求简单，并且没有过高的性能要求，可以用 Jedis + Jedis Pool</li>\n<li>如果项目不是 Spring，并且追求高性能、高定制化，可以用 Lettuce，支持异步、连接池</li>\n</ol>\n<h2 id=\"8-4-设计缓存-key\"><a href=\"#8-4-设计缓存-key\" class=\"headerlink\" title=\"8.4 设计缓存 key\"></a>8.4 设计缓存 key</h2><ul>\n<li>不同用户看到的数据不同</li>\n<li>systemId:moduleId:func:options（不要和别人冲突）</li>\n<li>kunjing:user:recommed:userId</li>\n</ul>\n<p><strong>redis 内存不能无限增加，一定要设置过期时间。</strong></p>\n<h2 id=\"8-5-缓存预热\"><a href=\"#8-5-缓存预热\" class=\"headerlink\" title=\"8.5 缓存预热\"></a>8.5 缓存预热</h2><p>问题：第一个用户访问还是很慢（加入第一个老板），也能一定程度上保护数据库</p>\n<h3 id=\"8-5-1-优缺点\"><a href=\"#8-5-1-优缺点\" class=\"headerlink\" title=\"8.5.1 优缺点\"></a>8.5.1 优缺点</h3><ul>\n<li><p>缓存预热的优点：</p>\n<ol>\n<li>解决上面的问题，可以让用户始终访问很快</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><p>缺点：</p>\n<ol>\n<li>增加开发成本（你要额外的开发、设计）</li>\n<li>预热的时机和时间如果错了，有可能你缓存的数据不对或者太老</li>\n<li>需要占用额外空间</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"8-5-2-缓存预热\"><a href=\"#8-5-2-缓存预热\" class=\"headerlink\" title=\"8.5.2 缓存预热\"></a>8.5.2 缓存预热</h3><ol>\n<li>定时</li>\n<li>模拟触发（手动触发）</li>\n</ol>\n<h3 id=\"8-5-3-实现\"><a href=\"#8-5-3-实现\" class=\"headerlink\" title=\"8.5.3 实现\"></a>8.5.3 实现</h3><ul>\n<li>用定时任务，每天刷新所有用户的推荐列表</li>\n<li>注意点：<ol>\n<li>缓存预热的意义（新增少、总用户多）</li>\n<li>缓存的空间不能太大，要预留给其他缓存空间</li>\n<li>缓存数据的周期（此处每天一次）</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"9-缓存预热—定时任务\"><a href=\"#9-缓存预热—定时任务\" class=\"headerlink\" title=\"9 缓存预热—定时任务\"></a>9 缓存预热—定时任务</h1><ol>\n<li><strong>Spring Scheduler（spring boot 默认整合了）</strong> </li>\n<li>Quartz（独立于 Spring 存在的定时任务框架）</li>\n<li>XXL-Job 之类的分布式任务调度平台（界面 + sdk）</li>\n</ol>\n<ul>\n<li><p>第一种方式：</p>\n<ol>\n<li>主类开启 @EnableScheduling</li>\n<li>给要定时执行的方法添加 @Scheduling 注解，指定 cron 表达式或者执行频率</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><p>不必背 cron 表达式。</p>\n<p><a href=\"https://cron.qqe2.com/\">https://cron.qqe2.com/</a></p>\n<p><a href=\"https://www.matools.com/crontab/\">https://www.matools.com/crontab/</a></p>\n</li>\n</ul>\n<h2 id=\"9-1-控制定时任务的执行\"><a href=\"#9-1-控制定时任务的执行\" class=\"headerlink\" title=\"9.1 控制定时任务的执行\"></a>9.1 控制定时任务的执行</h2><ol>\n<li>浪费资源，想象 10000 台服务器同时 “打鸣”</li>\n<li>脏数据，比如重复插入</li>\n</ol>\n<ul>\n<li><strong>要控制定时任务在同一时间只有 1 个服务器能执行。</strong></li>\n</ul>\n<ol>\n<li><p>分离定时任务程序和主程序，只在 1 个服务器运行定时任务。成本太大</p>\n</li>\n<li><p>写死配置，每个服务器都执行定时任务，但是只有 ip 符合配置的服务器才真实执行业务逻辑，其他的直接返回。成本最低；但是我们的 IP 可能是不固定的，把 IP 写的太死了</p>\n</li>\n<li><p>动态配置，配置是可以轻松的、很方便地更新的（<strong>代码无需重启</strong>），但是只有 ip 符合配置的服务器才真实执行业务逻辑。</p>\n<ul>\n<li>数据库</li>\n<li>Redis</li>\n<li>配置中心（Nacos、Apollo、Spring Cloud Config）</li>\n</ul>\n<p>问题：服务器多了、IP 不可控还是很麻烦，还是要人工修改</p>\n</li>\n<li><p>分布式锁，只有抢到锁的服务器才能执行业务逻辑。坏处：增加成本；好处：不用手动配置，多少个服务器都一样。</p>\n</li>\n</ol>\n<ul>\n<li><strong>单机就会存在单点故障。</strong></li>\n</ul>\n<h1 id=\"10-控制定时任务—锁\"><a href=\"#10-控制定时任务—锁\" class=\"headerlink\" title=\"10 控制定时任务—锁\"></a>10 控制定时任务—锁</h1><ul>\n<li>有限资源的情况下，控制同一时间（段）只有某些线程（用户 / 服务器）能访问到资源。</li>\n<li>Java 实现锁：synchronized 关键字、并发包的类</li>\n<li>问题：只对单个 JVM 有效</li>\n</ul>\n<h2 id=\"10-1-分布式锁\"><a href=\"#10-1-分布式锁\" class=\"headerlink\" title=\"10.1 分布式锁\"></a>10.1 分布式锁</h2><ol>\n<li>有限资源的情况下，控制同一时间（段）只有某些线程（用户 / 服务器）能访问到资源。</li>\n<li>单个锁只对单个 JVM 有效</li>\n</ol>\n<h2 id=\"10-2-分布式锁实现的关键\"><a href=\"#10-2-分布式锁实现的关键\" class=\"headerlink\" title=\"10.2 分布式锁实现的关键\"></a>10.2 分布式锁实现的关键</h2><h3 id=\"10-2-1-抢锁机制\"><a href=\"#10-2-1-抢锁机制\" class=\"headerlink\" title=\"10.2.1 抢锁机制\"></a>10.2.1 抢锁机制</h3><ul>\n<li>保证同一时间只有 1 个服务器能抢到锁 <strong>核心思想</strong> ：<ul>\n<li>先来的人先把数据改成自己的标识（服务器 ip），后来的人发现标识已存在，就抢锁失败，继续等待。</li>\n<li>等先来的人执行方法结束，把标识清空，其他的人继续抢锁。</li>\n</ul>\n</li>\n<li>MySQL 数据库：select for update 行级锁（最简单）（乐观锁）<ul>\n<li>Redis 实现：内存数据库，<strong>读写速度快</strong> 。支持 <strong>setnx</strong>、lua 脚本，比较方便我们实现分布式锁。</li>\n<li>setnx：set if not exists 如果不存在，则设置；只有设置成功才会返回 true，否则返回 false</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"10-2-2-注意事项\"><a href=\"#10-2-2-注意事项\" class=\"headerlink\" title=\"10.2.2 注意事项\"></a>10.2.2 注意事项</h3><ol>\n<li><p>用完锁要释放（腾地方）√</p>\n</li>\n<li><p><strong>锁一定要加过期时间 √</strong></p>\n</li>\n<li><p>如果方法执行时间过长，锁提前过期了？</p>\n<p>问题：</p>\n<ol>\n<li>连锁效应：释放掉别人的锁</li>\n<li>这样还是会存在多个方法同时执行的情况</li>\n</ol>\n</li>\n</ol>\n<p>​    解决方案：续期</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">boolean end &#x3D; false;\n\nnew Thread(() -&gt; &#123;\n    if (!end)&#125;&#123;\n    续期\n&#125;)\n\nend &#x3D; true;\n</code></pre>\n<ol>\n<li><p>释放锁的时候，有可能先判断出是自己的锁，但这时锁过期了，最后还是释放了别人的锁</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 原子操作\nif(get lock &#x3D;&#x3D; A) &#123;\n    &#x2F;&#x2F; set lock B\n    del lock\n&#125;</code></pre>\n<p>Redis + lua 脚本实现</p>\n</li>\n<li><p>Redis 如果是集群（而不是只有一个 Redis），如果分布式锁的数据不同步怎么办？</p>\n</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/feiying0canglang/article/details/113258494\">https://blog.csdn.net/feiying0canglang/article/details/113258494</a></p>\n<h2 id=\"10-3-Redisson-实现分布式锁\"><a href=\"#10-3-Redisson-实现分布式锁\" class=\"headerlink\" title=\"10.3 Redisson 实现分布式锁\"></a>10.3 Redisson 实现分布式锁</h2><ul>\n<li>Java 客户端，数据网格</li>\n<li>实现了很多 Java 里支持的接口和数据结构</li>\n<li>Redisson 是一个 java 操作 Redis 的客户端，<strong>提供了大量的分布式数据集来简化对 Redis 的操作和使用，可以让开发者像使用本地集合一样使用 Redis，完全感知不到 Redis 的存在。</strong></li>\n</ul>\n<h3 id=\"10-3-1-2-种引入方式\"><a href=\"#10-3-1-2-种引入方式\" class=\"headerlink\" title=\"10.3.1 2 种引入方式\"></a>10.3.1 2 种引入方式</h3><ol>\n<li>spring boot starter 引入（不推荐，版本迭代太快，容易冲突）<a href=\"https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter\">https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter</a></li>\n<li>直接引入：<a href=\"https://github.com/redisson/redisson#quick-start\">https://github.com/redisson/redisson#quick-start</a></li>\n</ol>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-setnx\" data-language=\"setnx\"><code class=\"language-setnx\">&#x2F;&#x2F; list，数据存在本地 JVM 内存中\nList&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();\nlist.add(&quot;Brandon&quot;);\nSystem.out.println(&quot;list:&quot; + list.get(0));\n\nlist.remove(0);\n\n&#x2F;&#x2F; 数据存在 redis 的内存中\nRList&lt;String&gt; rList &#x3D; redissonClient.getList(&quot;test-list&quot;);\nrList.add(&quot;Brandon&quot;);\nSystem.out.println(&quot;rlist:&quot; + rList.get(0));\nrList.remove(0);</code></pre>\n<h2 id=\"10-4-定时任务-锁\"><a href=\"#10-4-定时任务-锁\" class=\"headerlink\" title=\"10.4 定时任务  + 锁\"></a>10.4 定时任务  + 锁</h2><ol>\n<li>waitTime 设置为 0，只抢一次，抢不到就放弃</li>\n<li>注意释放锁要写在 finally 中</li>\n</ol>\n<h3 id=\"10-4-1-实现代码\"><a href=\"#10-4-1-实现代码\" class=\"headerlink\" title=\"10.4.1 实现代码\"></a>10.4.1 实现代码</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">void testWatchDog() &#123;\n    RLock lock &#x3D; redissonClient.getLock(&quot;kunjing:precachejob:docache:lock&quot;);\n    try &#123;\n        &#x2F;&#x2F; 只有一个线程能获取到锁\n        if (lock.tryLock(0, -1, TimeUnit.MILLISECONDS)) &#123;\n            &#x2F;&#x2F; todo 实际要执行的方法\n            doSomeThings();\n            System.out.println(&quot;getLock: &quot; + Thread.currentThread().getId());\n        &#125;\n    &#125; catch (InterruptedException e) &#123;\n        System.out.println(e.getMessage());\n    &#125; finally &#123;\n        &#x2F;&#x2F; 只能释放自己的锁\n        if (lock.isHeldByCurrentThread()) &#123;\n            System.out.println(&quot;unLock: &quot; + Thread.currentThread().getId());\n            lock.unlock();\n        &#125;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"10-4-2-看门狗机制\"><a href=\"#10-4-2-看门狗机制\" class=\"headerlink\" title=\"10.4.2 看门狗机制\"></a>10.4.2 看门狗机制</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>redisson 中提供的续期机制</p></blockquote>\n<p>开一个监听线程，如果方法还没执行完，就帮你重置 redis 锁的过期时间。</p>\n<p><strong>原理</strong>：</p>\n<ol>\n<li>监听当前线程，默认过期时间是 30 秒，每 10 秒续期一次（补到 30 秒）</li>\n<li>如果线程挂掉（注意 debug 模式也会被它当成服务器宕机），则不会续期</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/qq_26222859/article/details/79645203\">https://blog.csdn.net/qq_26222859/article/details/79645203</a></p>\n<hr>\n<p>Zookeeper 实现（不推荐）</p>\n<h1 id=\"11-组队功能\"><a href=\"#11-组队功能\" class=\"headerlink\" title=\"11 组队功能\"></a>11 组队功能</h1><h2 id=\"11-1-理想的应用场景\"><a href=\"#11-1-理想的应用场景\" class=\"headerlink\" title=\"11.1 理想的应用场景\"></a>11.1 理想的应用场景</h2><p>和别人一起参加竞赛或者做项目，可以发起队伍或者加入别人的队伍。</p>\n<h2 id=\"11-2-需求分析\"><a href=\"#11-2-需求分析\" class=\"headerlink\" title=\"11.2 需求分析\"></a>11.2 需求分析</h2><ul>\n<li>用户可以 <strong>创建</strong> 一个队伍，设置队伍的人数、队伍名称（标题）、描述、超时时间 P0</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>队长、剩余的人数</p>\n<p>聊天？</p>\n<p>公开 或 private 或加密</p>\n<p><strong>用户创建队伍最多 5 个</strong></p></blockquote>\n<ul>\n<li>展示队伍列表，根据名称搜索队伍  P0，信息流中不展示已过期的队伍</li>\n</ul>\n<ul>\n<li>修改队伍信息 P0 ~ P1</li>\n</ul>\n<ul>\n<li>用户可以加入队伍（其他人、未满、未过期），允许加入多个队伍，但是要有个上限  P0</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>是否需要队长同意？筛选审批？</p></blockquote>\n<ul>\n<li>用户可以退出队伍（如果队长退出，权限转移给第二早加入的用户 —— 先来后到） P1</li>\n</ul>\n<ul>\n<li>队长可以解散队伍 P0</li>\n</ul>\n<hr>\n<ul>\n<li>分享队伍 =》 邀请其他用户加入队伍 P1</li>\n</ul>\n<ul>\n<li><p>业务流程：</p>\n<ol>\n<li>生成分享链接（分享二维码）</li>\n<li>用户访问链接，可以点击加入</li>\n</ol>\n</li>\n<li><p>队伍人满后发送消息通知 P1</p>\n</li>\n</ul>\n<h2 id=\"11-3-系统（接口）设计\"><a href=\"#11-3-系统（接口）设计\" class=\"headerlink\" title=\"11.3 系统（接口）设计\"></a>11.3 系统（接口）设计</h2><h3 id=\"11-3-1-创建队伍\"><a href=\"#11-3-1-创建队伍\" class=\"headerlink\" title=\"11.3.1 创建队伍\"></a>11.3.1 创建队伍</h3><p>用户可以 <strong>创建</strong> 一个队伍，设置队伍的人数、队伍名称（标题）、描述、超时时间 P0</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>队长、剩余的人数</p>\n<p>聊天？</p>\n<p>公开 或 private 或加密</p>\n<p>信息流中不展示已过期的队伍</p></blockquote>\n<ol>\n<li>请求参数是否为空？</li>\n<li>是否登录，未登录不允许创建</li>\n<li>校验信息<ol>\n<li>队伍人数 &gt; 1 且 &lt;= 20</li>\n<li>队伍标题 &lt;= 20</li>\n<li>描述 &lt;= 512</li>\n<li>status 是否公开（int）不传默认为 0（公开）</li>\n<li>如果 status 是加密状态，一定要有密码，且密码 &lt;= 32</li>\n<li>超时时间 &gt; 当前时间</li>\n<li>校验用户最多创建 5 个队伍</li>\n</ol>\n</li>\n<li>插入队伍信息到队伍表</li>\n<li>插入用户  =&gt; 队伍关系到关系表</li>\n</ol>\n<h3 id=\"11-3-2-查询队伍列表\"><a href=\"#11-3-2-查询队伍列表\" class=\"headerlink\" title=\"11.3.2 查询队伍列表\"></a>11.3.2 查询队伍列表</h3><p>分页展示队伍列表，根据名称、最大人数等搜索队伍  P0，信息流中不展示已过期的队伍</p>\n<ol>\n<li>从请求参数中取出队伍名称等查询条件，如果存在则作为查询条件</li>\n<li>不展示已过期的队伍（根据过期时间筛选）</li>\n<li>可以通过某个<strong>关键词</strong>同时对名称和描述查询</li>\n<li><strong>只有管理员才能查看加密还有非公开的房间</strong></li>\n<li>关联查询已加入队伍的用户信息</li>\n<li><strong>关联查询已加入队伍的用户信息（可能会很耗费性能，建议大家用自己写 SQL 的方式实现）</strong></li>\n</ol>\n<p><strong>实现方式</strong></p>\n<p>1）自己写 SQL</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">&#x2F;&#x2F; 1. 自己写 SQL\n&#x2F;&#x2F; 查询队伍和创建人的信息\nselect * from team t left join user u on t.userId &#x3D; u.id\n&#x2F;&#x2F; 查询队伍和已加入队伍成员的信息\nselect *\nfrom team t\n       left join user_team ut on t.id &#x3D; ut.teamId\n       left join user u on ut.userId &#x3D; u.id;</code></pre>\n<h3 id=\"11-3-3-修改队伍信息\"><a href=\"#11-3-3-修改队伍信息\" class=\"headerlink\" title=\"11.3.3 修改队伍信息\"></a>11.3.3 修改队伍信息</h3><ol>\n<li>判断请求参数是否为空</li>\n<li>查询队伍是否存在</li>\n<li>只有管理员或者队伍的创建者可以修改</li>\n<li>如果用户传入的新值和老值一致，就不用 update 了（可自行实现，降低数据库使用次数）</li>\n<li><strong>如果队伍状态改为加密，必须要有密码</strong></li>\n<li>更新成功</li>\n</ol>\n<h3 id=\"11-3-4-用户可以加入队伍\"><a href=\"#11-3-4-用户可以加入队伍\" class=\"headerlink\" title=\"11.3.4 用户可以加入队伍\"></a>11.3.4 用户可以加入队伍</h3><p>其他人、未满、未过期，允许加入多个队伍，但是要有个上限  P0</p>\n<ol>\n<li>用户最多加入 5 个队伍</li>\n<li>队伍必须存在，只能加入未满、未过期的队伍</li>\n<li>不能加入自己的队伍，不能重复加入已加入的队伍（幂等性）</li>\n<li>禁止加入私有的队伍</li>\n<li>如果加入的队伍是加密的，必须密码匹配才可以</li>\n<li>新增队伍 - 用户关联信息</li>\n</ol>\n<h3 id=\"11-3-5-用户可以退出队伍\"><a href=\"#11-3-5-用户可以退出队伍\" class=\"headerlink\" title=\"11.3.5 用户可以退出队伍\"></a>11.3.5 用户可以退出队伍</h3><p>请求参数：队伍 id</p>\n<ol>\n<li><p>校验请求参数</p>\n</li>\n<li><p>校验队伍是否存在</p>\n</li>\n<li><p>校验我是否已加入队伍</p>\n</li>\n<li><p>如果队伍</p>\n<ol>\n<li><p>只剩一人，队伍解散</p>\n</li>\n<li><p>还有其他人</p>\n<ol>\n<li><p>如果是队长退出队伍，权限转移给第二早加入的用户 —— 先来后到</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>只用取 id 最小的 2 条数据</p></blockquote>\n</li>\n<li><p>非队长，自己退出队伍</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"11-3-6-队长可以解散队伍\"><a href=\"#11-3-6-队长可以解散队伍\" class=\"headerlink\" title=\"11.3.6 队长可以解散队伍\"></a>11.3.6 队长可以解散队伍</h3><p>请求参数：队伍 id</p>\n<p>业务流程：</p>\n<ol>\n<li>校验请求参数</li>\n<li>校验队伍是否存在</li>\n<li>校验你是不是队伍的队长</li>\n<li>移除所有加入队伍的关联信息</li>\n<li>删除队伍</li>\n</ol>\n<h2 id=\"11-4-事务注解\"><a href=\"#11-4-事务注解\" class=\"headerlink\" title=\"11.4 事务注解\"></a>11.4 事务注解</h2><p>@Transactional(rollbackFor = Exception.class)</p>\n<p>事务回滚，要么数据操作都成功，要么都失败。</p>\n<h2 id=\"11-5-请求参数包装类\"><a href=\"#11-5-请求参数包装类\" class=\"headerlink\" title=\"11.5 请求参数包装类\"></a>11.5 请求参数包装类</h2><ol>\n<li><p>请求参数名称 / 类型和实体类不一样</p>\n</li>\n<li><p>有一些参数用不到，如果要自动生成接口文档，会增加理解成本</p>\n</li>\n<li><p>对个实体类映射到同一个对象</p>\n</li>\n</ol>\n<h3 id=\"11-5-1-包装类作用\"><a href=\"#11-5-1-包装类作用\" class=\"headerlink\" title=\"11.5.1 包装类作用\"></a>11.5.1 包装类作用</h3><ul>\n<li>可能有些字段需要隐藏，不能返回给前端</li>\n</ul>\n<ul>\n<li>或者有些字段某些方法是不关心的</li>\n</ul>\n<h2 id=\"11-6-数据查询可分表\"><a href=\"#11-6-数据查询可分表\" class=\"headerlink\" title=\"11.6 数据查询可分表\"></a>11.6 数据查询可分表</h2><ul>\n<li>mycat、sharding sphere 框架</li>\n<li>一致性 hash</li>\n</ul>\n<h2 id=\"11-7-队伍操作权限控制\"><a href=\"#11-7-队伍操作权限控制\" class=\"headerlink\" title=\"11.7 队伍操作权限控制\"></a>11.7 队伍操作权限控制</h2><ul>\n<li>加入队伍： 仅非队伍创建人、且未加入队伍的人可见</li>\n<li>更新队伍：仅创建人可见</li>\n<li>解散队伍：仅创建人可见</li>\n<li>退出队伍：创建人不可见，仅已加入队伍的人可见</li>\n</ul>\n<h1 id=\"12-随机匹配\"><a href=\"#12-随机匹配\" class=\"headerlink\" title=\"12 随机匹配\"></a>12 随机匹配</h1><p>更快地匹配自己兴趣相同的队友</p>\n<h2 id=\"12-1-匹配原理\"><a href=\"#12-1-匹配原理\" class=\"headerlink\" title=\"12.1 匹配原理\"></a>12.1 匹配原理</h2><ul>\n<li>匹配多个，并且按照匹配的相似度从高到低排序、</li>\n<li>根据标签 tags 匹配</li>\n<li>还可以根据 user_team 匹配加入相同队伍的用户</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本质：找到有相似标签的用户</p>\n<p>举例：</p>\n<p>用户 A：[Java, 大一, 男]</p>\n<p>用户 B：[Java, 大二, 男]</p>\n<p>用户 C：[Python, 大二, 女]</p>\n<p>用户 D：[Java, 大一, 女]</p></blockquote>\n<ol>\n<li>找到有共同标签最多的用户（TopN）</li>\n<li>共同标签越多，分数越高，越排在前面</li>\n<li>如果没有匹配的用户，随机推荐几个（降级方案）</li>\n</ol>\n<h2 id=\"12-2-匹配算法\"><a href=\"#12-2-匹配算法\" class=\"headerlink\" title=\"12.2 匹配算法\"></a>12.2 匹配算法</h2><p>编辑距离算法：<a href=\"https://blog.csdn.net/DBC_121/article/details/104198838\">https://blog.csdn.net/DBC_121/article/details/104198838</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>最小编辑距离：字符串 1 通过最少多少次增删改字符的操作可以变成字符串 2</p></blockquote>\n<p>余弦相似度算法：<a href=\"https://blog.csdn.net/m0_55613022/article/details/125683937（如果需要带权重计算，比如学什么方向最重要，性别相对次要）\">https://blog.csdn.net/m0_55613022/article/details/125683937（如果需要带权重计算，比如学什么方向最重要，性别相对次要）</a></p>\n<h2 id=\"12-3-匹配实现\"><a href=\"#12-3-匹配实现\" class=\"headerlink\" title=\"12.3 匹配实现\"></a>12.3 匹配实现</h2><ul>\n<li>直接取出所有用户，依次和当前用户计算分数，取 TOP N（54 秒）</li>\n</ul>\n<p>优化方法：</p>\n<ol>\n<li><p>切忌不要在数据量大的时候循环输出日志（取消掉日志后 20 秒）</p>\n</li>\n<li><p>Map 存了所有的分数信息，占用内存</p>\n<p>解决：维护一个固定长度的有序集合（sortedSet），只保留分数最高的几个用户（时间换空间）</p>\n<p>e.g.【3, 4, 5, 6, 7】取 TOP 5，id 为 1 的用户就不用放进去了</p>\n</li>\n<li><p>细节：剔除自己 √</p>\n</li>\n<li><p>尽量只查需要的数据：</p>\n<ol>\n<li>过滤掉标签为空的用户 √</li>\n<li>根据部分标签取用户（前提是能区分出来哪个标签比较重要）</li>\n<li>只查需要的数据（比如 id 和 tags） √（7.0s）</li>\n</ol>\n</li>\n<li><p>提前查？（定时任务）</p>\n<ol>\n<li>提前把所有用户给缓存（不适用于经常更新的数据）</li>\n<li>提前运算出来结果，缓存（针对一些重点用户，提前缓存）</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li><p>大数据推荐不需要查出所有用户及相似度。</p>\n<p>检索 =&gt; 召回 =&gt; 粗排 =&gt; 精排 =&gt; 重排序等等。</p>\n<ul>\n<li>检索：尽可能多地查符合要求的数据（比如按记录查）</li>\n<li>召回：查询可能要用到的数据（不做运算）</li>\n<li>粗排：粗略排序，简单地运算（运算相对轻量）</li>\n<li>精排：精细排序，确定固定排位</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"13-遇到问题及解决\"><a href=\"#13-遇到问题及解决\" class=\"headerlink\" title=\"13 遇到问题及解决\"></a>13 遇到问题及解决</h1><ul>\n<li>组件化思想：很多页面要复用组件 / 样式，重复写很麻烦、不利于维护，所以抽象一个通用的布局（Layout）</li>\n<li>查询所有标签并分组：按父标签 id 分组</li>\n<li>根据父标签查询子标签：根据 id 查询</li>\n<li>内存查询与数据库查询优化</li>\n<li>优化主页性能：缓存 + 定时任务 + 分布式锁</li>\n<li>缓存 + 锁用完释放、设置过期时间</li>\n<li>前端加载骨架屏特效：van-skeleton 组件</li>\n<li>仅加入队伍和创建队伍的人能看到队伍操作按钮（listTeam 接口要能获取我加入的队伍状态）<ul>\n<li>前端查询我加入了哪些队伍列表，然后判断每个队伍 id 是否在列表中（前端要多发一次请求）</li>\n<li>在后端去做上述事情（推荐）</li>\n</ul>\n</li>\n<li>前端导航栏死【标题】问题：使用 router.beforeEach，根据要跳转页面的 url 路径 匹配 config/routes 配置的 title 字段。</li>\n<li>强制登录，前端全局响应拦截，自动跳转到登录页</li>\n<li>加入有密码的房间，要指定密码</li>\n<li>分布式锁 导致的其他服务器数据不统一的问题或者多个 Redis 里的数据不一致。</li>\n<li>重复加入队伍的问题（加锁、分布式锁）并发请求时可能出现问题</li>\n<li>用户登录页跳转</li>\n<li>标签</li>\n<li>前端拦截器统一输出日志</li>\n</ul>\n<ul>\n<li><p>Vant3 更新后配置 viteconfig 需要 npm 按需引入插件了，styleImport 变成了 Component，resolve 变成了 resolver，vite3 更新后还得单独引入 css，感觉越变越麻烦但确实降低了冗余</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221005142417165.png\" alt=\"image-20221005142417165\" style=\"zoom: 50%;\" /></p>\n</li>\n<li><p>项目初始化不小心混合了 Vant2 和 Vant3 unplugin-vue-components 再手动引入组件样式的按需引入插件和样式</p>\n</li>\n<li><p>导入 Swagger + Knife4j 出现版本冲突，yml 开始没解析 ant_patch_matcher 也许有缓存</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221005142616136.png\" alt=\"image-20221005142616136\" style=\"zoom: 50%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221005142635536.png\" alt=\"image-20221005142635536\" style=\"zoom:50%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221005142648186.png\" alt=\"image-20221005142648186\"></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/image-20221005142659357.png\" alt=\"image-20221005142659357\" style=\"zoom:50%;\" /></p>\n</li>\n<li><p>mvnrepository中easyexcel3.1.0版本用不了了，idea2022.2database没有了</p>\n</li>\n<li><p>共模拟1000000条数据，插入1000条3s，顺序执行批量导入0.8s，100000条17s，并发100000条10组5s ，20组、40组5s性能几乎无变化，可能与线程切换需要时间、数据库性能、CPU核数（CPU密集型线程数CPU核数-1，IO密集型线程数可以大于CPU核数）有关，不同情况需具体测试。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6csy76nqmj31hc0u0gpx.jpg\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6cu4ja9hmj31hc0so442.jpg\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6cvekh4elj31ha0sojvl.jpg\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6cvl6l9zoj31hc0sogqm.jpg\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6cvpvwvvej31hc0sotds.jpg\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6cvpw75inj31hc0sodmh.jpg\" alt=\"img\" style=\"zoom:50%;\" /></p>\n</li>\n<li><p>redis timeout MILLISECONDS写成MICROSECONDS</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6dint7jqkj31hc0u0afc.jpg\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6dintgkikj31am0oz12r.jpg\" alt=\"img\" style=\"zoom:50%;\" /></p>\n</li>\n<li><p>lombok只要改个pom就会找不到符号，找不到方法，勾选enable annotation processing基本没用，setting里build，compiler对VM options加上-Djs.track.ap.dependencies=false好用</p>\n</li>\n<li><p>两个Long封装类不能用!=，最后抽离出两个变量转为long基本类型却可以使用!=。可能 Java 更新后 ==比较栈（内存中地址值），equals比较堆（两个对象的内容） </p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6fmdjcmsuj31630dg15n.jpg\" alt=\"img\" style=\"zoom: 80%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6fmdjtv49j316e0g2ws8.jpg\" alt=\"img\" style=\"zoom:80%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6fmdk1kqaj30uj0cedl0.jpg\" alt=\"img\" style=\"zoom: 80%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6fmdkcqhij316k0mmac2.jpg\" alt=\"img\" style=\"zoom:80%;\" /></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7615/006wD479ly1h6fmdkkszjj31040con3j.jpg\" alt=\"img\" style=\"zoom:80%;\" /></p>\n</li>\n<li><p>前后端联调CORS协议现在CROSSORIGIN配置跨域还要配置安全证书(allowCredentials=true) </p>\n</li>\n<li><p>WebStorm打包ts的时避免报错可以file，setting，file watcher配置Typescript，有的加的// <a href=\"https://weibo.com/n/ts-ignore\">@ts-ignore</a>，有的加的any类型，或者给自己定义的.d.ts加上了变量，ts.config里面strict可以改成false。</p>\n</li>\n<li><p>部署上线记得改前后端URL域名，端口。 </p>\n</li>\n</ul>\n","text":"坤竞——HBU竞赛组队匹配系统介绍：帮助河北大学师生营造更好的竞赛氛围，找到志同道合的伙伴，移动端 H5 网页（尽量兼容 PC 端），后续可加入科研方面。 测试v1.0.0：http://kunjing.brandon777.com（未导入数据，前后端接口暂未接入） 1 需求分析...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"Project","slug":"Project","count":2,"path":"api/categories/Project.json"}],"tags":[{"name":"Kunjing","slug":"Kunjing","count":1,"path":"api/tags/Kunjing.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9D%A4%E7%AB%9E%E2%80%94%E2%80%94HBU%E7%AB%9E%E8%B5%9B%E7%BB%84%E9%98%9F%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">坤竞——HBU竞赛组队匹配系统</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\"><span class=\"toc-text\">1 需求分析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B\"><span class=\"toc-text\">2 技术选型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%89%8D%E7%AB%AF\"><span class=\"toc-text\">2.1 前端</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%90%8E%E7%AB%AF\"><span class=\"toc-text\">2.2 后端</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%8F%8A%E9%80%89%E6%8B%A9\"><span class=\"toc-text\">3 数据库表设计及选择</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E7%94%A8%E6%88%B7%E8%A1%A8-user\"><span class=\"toc-text\">3.1 用户表 user</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-1-%E5%AD%97%E6%AE%B5%E9%98%90%E9%87%8A\"><span class=\"toc-text\">3.1.1 字段阐释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-2-%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.1.2 建表语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E9%98%9F%E4%BC%8D%E8%A1%A8-team\"><span class=\"toc-text\">3.2 队伍表 team</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-1-%E5%AD%97%E6%AE%B5%E9%98%90%E9%87%8A-1\"><span class=\"toc-text\">3.1.1 字段阐释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-2-%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5-1\"><span class=\"toc-text\">3.1.2 建表语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E7%94%A8%E6%88%B7-%E9%98%9F%E4%BC%8D%E8%A1%A8-user-team\"><span class=\"toc-text\">3.3 用户-队伍表 user_team</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-1-%E5%AD%97%E6%AE%B5%E9%98%90%E9%87%8A-2\"><span class=\"toc-text\">3.1.1 字段阐释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-2-%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5-2\"><span class=\"toc-text\">3.1.2 建表语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-%E6%A0%87%E7%AD%BE%E8%A1%A8%EF%BC%88%E5%88%86%E7%B1%BB%E8%A1%A8%EF%BC%89%EF%BC%88%E5%B9%B6%E6%9C%AA%E9%80%89%E6%8B%A9%EF%BC%89\"><span class=\"toc-text\">3.4 标签表（分类表）（并未选择）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-1-%E5%AD%97%E6%AE%B5%E9%98%90%E9%87%8A\"><span class=\"toc-text\">3.4.1 字段阐释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-2-%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.4.2 建表语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.5 查询方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">4 前端项目初始化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E5%89%8D%E7%AB%AF%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">4.1 前端引入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E5%89%8D%E7%AB%AF%E4%B8%BB%E9%A1%B5%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">4.2 前端主页设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E5%89%8D%E7%AB%AF%E6%95%B4%E5%90%88%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">4.3 前端整合路由</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">4.4 前端页面跳转传值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-%E5%89%8D%E7%AB%AF%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.5 前端不同页面传递数据</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E5%BC%80%E5%8F%91%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">5 开发后端接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E6%90%9C%E7%B4%A2%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">5.1 搜索标签</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E8%A7%A3%E6%9E%90-JSON-%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">5.2 解析 JSON 字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E6%95%B4%E5%90%88\"><span class=\"toc-text\">5.2 用户中心整合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-3-%E5%90%8E%E7%AB%AF%E6%95%B4%E5%90%88-Swagger-Knife4j-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">5.3 后端整合 Swagger + Knife4j 接口文档</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-1-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">5.3.1 接口文档说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-2-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">5.3.2 接口文档作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-3-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">5.3.3 接口文档实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-4-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">5.3.4 接口文档技巧</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-4-%E6%A8%A1%E6%8B%9F%E6%95%99%E5%8A%A1%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">5.4 模拟教务学生信息</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-Session-%E5%85%B1%E4%BA%AB\"><span class=\"toc-text\">6 Session 共享</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-1-Session-%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">6.1 Session 共享存储</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-2-Session-%E5%85%B1%E4%BA%AB%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">6.2 Session 共享实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-1-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">6.2.1 原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-2-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">6.2.2 实现</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-%E4%B8%BB%E9%A1%B5%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">7 主页开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-1-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">7.1 导入数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-2-%E7%BC%96%E5%86%99%E4%B8%80%E6%AC%A1%E6%80%A7%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">7.2 编写一次性任务</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E6%85%A2-%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">8 数据查询慢-缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-1-%E7%BC%93%E5%AD%98%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">8.1 缓存的实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-2-Redis\"><span class=\"toc-text\">8.2 Redis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-1-Redis-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">8.2.1 Redis 数据结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-2-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">8.2.2 自定义序列化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-3-Java-%E9%87%8C%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">8.3 Java 里的实现方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-1-Spring-Data-Redis%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89\"><span class=\"toc-text\">8.3.1 Spring Data Redis（推荐）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-2-Jedis\"><span class=\"toc-text\">8.3.2 Jedis</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-3-Lettuce\"><span class=\"toc-text\">8.3.3 Lettuce</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-4-Redisson\"><span class=\"toc-text\">8.3.4 Redisson</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-5-JetCache\"><span class=\"toc-text\">8.3.5 JetCache</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-4-%E8%AE%BE%E8%AE%A1%E7%BC%93%E5%AD%98-key\"><span class=\"toc-text\">8.4 设计缓存 key</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-5-%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD\"><span class=\"toc-text\">8.5 缓存预热</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-5-1-%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">8.5.1 优缺点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-5-2-%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD\"><span class=\"toc-text\">8.5.2 缓存预热</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-5-3-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">8.5.3 实现</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#9-%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD%E2%80%94%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">9 缓存预热—定时任务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-1-%E6%8E%A7%E5%88%B6%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">9.1 控制定时任务的执行</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10-%E6%8E%A7%E5%88%B6%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E2%80%94%E9%94%81\"><span class=\"toc-text\">10 控制定时任务—锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-1-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\"><span class=\"toc-text\">10.1 分布式锁</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-2-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%85%B3%E9%94%AE\"><span class=\"toc-text\">10.2 分布式锁实现的关键</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2-1-%E6%8A%A2%E9%94%81%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">10.2.1 抢锁机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2-2-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">10.2.2 注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-3-Redisson-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\"><span class=\"toc-text\">10.3 Redisson 实现分布式锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-3-1-2-%E7%A7%8D%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">10.3.1 2 种引入方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">示例代码</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-4-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E9%94%81\"><span class=\"toc-text\">10.4 定时任务  + 锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-4-1-%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">10.4.1 实现代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-4-2-%E7%9C%8B%E9%97%A8%E7%8B%97%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">10.4.2 看门狗机制</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#11-%E7%BB%84%E9%98%9F%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">11 组队功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-1-%E7%90%86%E6%83%B3%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">11.1 理想的应用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-2-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\"><span class=\"toc-text\">11.2 需求分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-3-%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%8E%A5%E5%8F%A3%EF%BC%89%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">11.3 系统（接口）设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-3-1-%E5%88%9B%E5%BB%BA%E9%98%9F%E4%BC%8D\"><span class=\"toc-text\">11.3.1 创建队伍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-3-2-%E6%9F%A5%E8%AF%A2%E9%98%9F%E4%BC%8D%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">11.3.2 查询队伍列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-3-3-%E4%BF%AE%E6%94%B9%E9%98%9F%E4%BC%8D%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">11.3.3 修改队伍信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-3-4-%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5%E5%8A%A0%E5%85%A5%E9%98%9F%E4%BC%8D\"><span class=\"toc-text\">11.3.4 用户可以加入队伍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-3-5-%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5%E9%80%80%E5%87%BA%E9%98%9F%E4%BC%8D\"><span class=\"toc-text\">11.3.5 用户可以退出队伍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-3-6-%E9%98%9F%E9%95%BF%E5%8F%AF%E4%BB%A5%E8%A7%A3%E6%95%A3%E9%98%9F%E4%BC%8D\"><span class=\"toc-text\">11.3.6 队长可以解散队伍</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-4-%E4%BA%8B%E5%8A%A1%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">11.4 事务注解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-5-%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%8C%85%E8%A3%85%E7%B1%BB\"><span class=\"toc-text\">11.5 请求参数包装类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-5-1-%E5%8C%85%E8%A3%85%E7%B1%BB%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">11.5.1 包装类作用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-6-%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E5%8F%AF%E5%88%86%E8%A1%A8\"><span class=\"toc-text\">11.6 数据查询可分表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-7-%E9%98%9F%E4%BC%8D%E6%93%8D%E4%BD%9C%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">11.7 队伍操作权限控制</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#12-%E9%9A%8F%E6%9C%BA%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">12 随机匹配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-1-%E5%8C%B9%E9%85%8D%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">12.1 匹配原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-2-%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">12.2 匹配算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-3-%E5%8C%B9%E9%85%8D%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">12.3 匹配实现</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#13-%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">13 遇到问题及解决</span></a></li></ol>","author":{"name":"Brandon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60676912?s=460&v=4","link":"/","description":"Never back down","socials":{"github":"https://github.com/DjyBrandon","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Brandon_","juejin":"https://juejin.cn/user/541388827538679","customs":{}}},"mapped":true,"prev_post":{"title":"Hackenet Walkthrough","uid":"7b17ab8fd94c1b49243bcf846271ed72","slug":"Hacknet Walkthrough","date":"2022-11-13T06:50:48.000Z","updated":"2022-11-29T14:27:42.756Z","comments":true,"path":"api/articles/Hacknet Walkthrough.json","keywords":null,"cover":"https://images.launchbox-app.com/00333c72-dc8e-4462-8415-7e2cee22ced6.png","text":"Tutorial篇 嗨，我的名字是bit 當你讀到這條訊息的時候我已經死了… Stream游戏hacknet，讲的是一个黑客，生命最后的一段故事… 在你连接到任何系统之后，你需要做的第一件事便是扫描它的相关节点。这将会在地图上显示其相关节点，现在扫描这台电脑。 点击扫描网络 是时...","link":"","photos":[],"count_time":{"symbolsCount":"42k","symbolsTime":"38 mins."},"categories":[{"name":"Cyber Security","slug":"Cyber-Security","count":1,"path":"api/categories/Cyber-Security.json"}],"tags":[{"name":"GOG Games","slug":"GOG-Games","count":1,"path":"api/tags/GOG-Games.json"}],"author":{"name":"Brandon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60676912?s=460&v=4","link":"/","description":"Never back down","socials":{"github":"https://github.com/DjyBrandon","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Brandon_","juejin":"https://juejin.cn/user/541388827538679","customs":{}}}},"next_post":{"title":"Opertion System Outline","uid":"d47a36c3a510133b5b347d3a187e7783","slug":"Operation System Outline","date":"2022-10-03T09:01:36.000Z","updated":"2023-01-23T00:08:55.347Z","comments":true,"path":"api/articles/Operation System Outline.json","keywords":null,"cover":"https://gaussian37.github.io/assets/img/c/linux/os/os.jpg","text":"0 前言0.1 前言 基本概念、基本方法 设计原理、实现方法 形成、类型、功能 进程管理、存储器管理、设备管理、文件管理 网络操作系统、分布式操作系统 0.2 内容 背景知识 基本概念、发展、特性、功能和结构设计 硬件环境 进程 进程和线程的 基本概念 进程控制 进程调度 进程同...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"Computer","slug":"Computer","count":4,"path":"api/categories/Computer.json"}],"tags":[{"name":"Opertion System","slug":"Opertion-System","count":1,"path":"api/tags/Opertion-System.json"}],"author":{"name":"Brandon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60676912?s=460&v=4","link":"/","description":"Never back down","socials":{"github":"https://github.com/DjyBrandon","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Brandon_","juejin":"https://juejin.cn/user/541388827538679","customs":{}}}}}
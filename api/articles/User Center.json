{"title":"User Center","uid":"1c444fa0484aa2cb0030ecd852dcfc6a","slug":"User Center","date":"2022-08-05T09:01:36.000Z","updated":"2022-10-06T07:52:25.076Z","comments":true,"path":"api/articles/User Center.json","keywords":null,"cover":[],"content":"<h1 id=\"用户中心笔记\"><a href=\"#用户中心笔记\" class=\"headerlink\" title=\"用户中心笔记\"></a>用户中心笔记</h1><p>目标：完整了解做项目的思路，接触一些企业级的开发技术，轻松做出管理系统。</p>\n<h2 id=\"企业做项目流程\"><a href=\"#企业做项目流程\" class=\"headerlink\" title=\"企业做项目流程\"></a>企业做项目流程</h2><p>需求分析 =&gt; 设计（概要设计、详细设计）=&gt; 技术选型 =&gt; 初始化 / 引入需要的技术 =&gt; 写 Demo =&gt; 写代码（实现业务逻辑） =&gt; 测试（单元测试、系统测试）=&gt; 代码提交 / 代码评审 =&gt; 部署 =&gt; 发布上线</p>\n<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><ol>\n<li>登录 / 注册</li>\n<li>用户管理（仅管理员可见）对用户的查询或者修改</li>\n<li>用户校验（仅星球用户可见）</li>\n</ol>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p>前端：三件套 + React + 组件库 Ant Design + Umi + Ant Design Pro（现成的管理系统）</p>\n<p>后端：</p>\n<ul>\n<li>java</li>\n<li>spring（依赖注入框架，帮助你管理 Java 对象，集成一些其他的内容）</li>\n<li>springmvc（web 框架，提供接口访问、restful接口等能力）</li>\n<li>mybatis（Java 操作数据库的框架，持久层框架，对 jdbc 的封装）</li>\n<li>mybatis-plus（对 mybatis 的增强，不用写 sql 也能实现增删改查）</li>\n<li>springboot（<strong>快速启动</strong> / 快速集成项目。不用自己管理 spring 配置，不用自己整合各种框架）</li>\n<li>junit 单元测试库</li>\n<li>mysql 数据库</li>\n</ul>\n<p>部署：服务器 / 容器（平台）</p>\n<h2 id=\"3-种初始化-Java-项目的方式\"><a href=\"#3-种初始化-Java-项目的方式\" class=\"headerlink\" title=\"3 种初始化 Java 项目的方式\"></a>3 种初始化 Java 项目的方式</h2><ol>\n<li>GitHub 搜现成的代码</li>\n<li>SpringBoot 官方的模板生成器（<a href=\"https://start.spring.io/）\">https://start.spring.io/）</a></li>\n<li>直接在 IDEA 开发工具中生成  ✔</li>\n</ol>\n<p>如果要引入 java 的包，可以去 maven 中心仓库寻找（<a href=\"http://mvnrepository.com/）\">http://mvnrepository.com/）</a></p>\n<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><p>什么是数据库？存数据的</p>\n<p>数据库里有什么？数据表（理解为 excel 表格）</p>\n<p>java 操作数据库？程序代替人工</p>\n<h3 id=\"什么是设计数据库表？\"><a href=\"#什么是设计数据库表？\" class=\"headerlink\" title=\"什么是设计数据库表？\"></a>什么是设计数据库表？</h3><p>有哪些表（模型）？表中有哪些字段？字段的类型？数据库字段添加索引？表与表之间的关联？</p>\n<p>举例：性别是否需要加索引？</p>\n<h3 id=\"用户表设计\"><a href=\"#用户表设计\" class=\"headerlink\" title=\"用户表设计\"></a>用户表设计</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字段</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">主键</td>\n<td style=\"text-align:center\">bigint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">username</td>\n<td style=\"text-align:center\">昵称</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">userAccount</td>\n<td style=\"text-align:center\">登录账号</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">avatarUrl</td>\n<td style=\"text-align:center\">头像</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gender</td>\n<td style=\"text-align:center\">性别</td>\n<td style=\"text-align:center\">tinyint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">userPassword</td>\n<td style=\"text-align:center\">密码</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">phone</td>\n<td style=\"text-align:center\">电话</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">email</td>\n<td style=\"text-align:center\">邮箱</td>\n<td style=\"text-align:center\">varchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">userStatus</td>\n<td style=\"text-align:center\">用户状态</td>\n<td style=\"text-align:center\">int  0 - 正常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createTime</td>\n<td style=\"text-align:center\">创建时间（数据插入时间）</td>\n<td style=\"text-align:center\">datetime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateTime</td>\n<td style=\"text-align:center\">更新时间（数据更新时间）</td>\n<td style=\"text-align:center\">datetime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isDelete</td>\n<td style=\"text-align:center\">是否删除 0 1（逻辑删除）</td>\n<td style=\"text-align:center\">tinyint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">userRole</td>\n<td style=\"text-align:center\">用户角色</td>\n<td style=\"text-align:center\">0 - 普通用户 1 - 管理员</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"自动生成器的使用\"><a href=\"#自动生成器的使用\" class=\"headerlink\" title=\"自动生成器的使用\"></a>自动生成器的使用</h3><p>MyBatisX 插件，自动根据数据库生成：</p>\n<ul>\n<li>domain：实体对象</li>\n<li>mapper：操作数据库的对象</li>\n<li>mapper.xml：定义了 mapper 对象和数据库的关联，可以在里面自己写 SQL</li>\n<li>service：包含常用的增删改查</li>\n<li>serviceImpl：具体实现 service</li>\n</ul>\n<p>从而提高开发效率！</p>\n<h2 id=\"注册逻辑设计\"><a href=\"#注册逻辑设计\" class=\"headerlink\" title=\"注册逻辑设计\"></a>注册逻辑设计</h2><ol>\n<li>用户在前端输入账户和密码、以及校验码（todo）</li>\n<li>校验用户的账户、密码、校验密码，是否符合要求<ol>\n<li>非空</li>\n<li>账户长度 <strong>不小于</strong> 4 位</li>\n<li>密码就 <strong>不小于</strong> 8 位吧</li>\n<li>账户不能重复</li>\n<li>账户不包含特殊字符</li>\n<li>密码和校验密码相同</li>\n</ol>\n</li>\n<li>对密码进行加密（密码千万不要直接以明文存储到数据库中）</li>\n<li>向数据库插入用户数据</li>\n</ol>\n<h2 id=\"登录功能\"><a href=\"#登录功能\" class=\"headerlink\" title=\"登录功能\"></a>登录功能</h2><h3 id=\"接口设计\"><a href=\"#接口设计\" class=\"headerlink\" title=\"接口设计\"></a>接口设计</h3><p>接受参数：用户账户、密码</p>\n<p>请求类型：POST </p>\n<p>请求体：JSON 格式的数据</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>请求参数很长时不建议用 get</p></blockquote>\n<p>返回值：用户信息（ <strong>脱敏</strong> ）</p>\n<h3 id=\"登录逻辑\"><a href=\"#登录逻辑\" class=\"headerlink\" title=\"登录逻辑\"></a>登录逻辑</h3><ol>\n<li><p>校验用户账户和密码是否合法</p>\n<ol>\n<li>非空</li>\n<li>账户长度不小于 4 位</li>\n<li>密码就不小于 8 位</li>\n<li>账户不包含特殊字符</li>\n</ol>\n</li>\n<li><p>校验密码是否输入正确，要和数据库中的密文密码去对比</p>\n</li>\n<li><p>用户信息脱敏，隐藏敏感信息，防止数据库中的字段泄露</p>\n</li>\n<li><p>我们要记录用户的登录态（session），将其存到服务器上（用后端 SpringBoot 框架封装的服务器 tomcat 去记录）</p>\n<p>cookie</p>\n</li>\n<li><p>返回脱敏后的用户信息</p>\n</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>控制层 Controller 封装请求</p>\n<p>application.yml 指定接口全局路径前缀：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">servlet:\n  context-path: &#x2F;api</code></pre>\n<p>控制器注解：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@RestController 适用于编写 restful 风格的 api，返回值默认为 json 类型</code></pre>\n<p>校验写在哪里？</p>\n<ul>\n<li>controller 层倾向于对请求参数本身的校验，不涉及业务逻辑本身（越少越好）</li>\n<li>service 层是对业务逻辑的校验（有可能被 controller 之外的类调用）</li>\n</ul>\n<h3 id=\"如何知道是哪个用户登录了？\"><a href=\"#如何知道是哪个用户登录了？\" class=\"headerlink\" title=\"如何知道是哪个用户登录了？\"></a>如何知道是哪个用户登录了？</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>javaweb 这一块的知识</p></blockquote>\n<ol>\n<li><p>连接服务器端后，得到一个 session 状态（匿名会话），返回给前端</p>\n</li>\n<li><p>登录成功后，得到了登录成功的 session，并且给该sessio n设置一些值（比如用户信息），返回给前端一个设置 cookie 的 ”命令“ </p>\n<p><strong>session =&gt; cookie</strong> </p>\n</li>\n<li><p>前端接收到后端的命令后，设置 cookie，保存到浏览器内</p>\n</li>\n<li><p>前端再次请求后端的时候（相同的域名），在请求头中带上cookie去请求</p>\n</li>\n<li><p>后端拿到前端传来的 cookie，找到对应的 session</p>\n</li>\n<li><p>后端从 session 中可以取出基于该 session 存储的变量（用户的登录信息、登录名）</p>\n</li>\n</ol>\n<h2 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h2><p>接口设计关键：必须鉴权！！！</p>\n<ol>\n<li>查询用户（允许根据用户名查询）</li>\n<li>删除用户</li>\n</ol>\n<h2 id=\"写代码流程\"><a href=\"#写代码流程\" class=\"headerlink\" title=\"写代码流程\"></a>写代码流程</h2><ol>\n<li>先做设计</li>\n<li>代码实现</li>\n<li>持续优化！！！（复用代码、提取公共逻辑 / 常量）</li>\n</ol>\n<h2 id=\"前后端交互\"><a href=\"#前后端交互\" class=\"headerlink\" title=\"前后端交互\"></a>前后端交互</h2><p>前端需要向后端发送请求才能获取数据 / 执行操作。</p>\n<p>怎么发请求：前端使用 ajax 来请求后端</p>\n<h3 id=\"前端请求库及封装关系\"><a href=\"#前端请求库及封装关系\" class=\"headerlink\" title=\"前端请求库及封装关系\"></a>前端请求库及封装关系</h3><ul>\n<li><p>axios 封装了 ajax</p>\n</li>\n<li><p>request 是 ant design 项目又封装了一次</p>\n</li>\n</ul>\n<p>追踪 request 源码：用到了 umi 的插件、requestConfig 配置文件</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>正向代理：替客户端向服务器发送请求，可以解决跨域问题</p>\n<p>反向代理：替服务器统一接收请求。</p>\n<p>怎么实现代理？</p>\n<ul>\n<li>Nginx 服务器</li>\n<li>Node.js 服务器</li>\n</ul>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>原本请求：<a href=\"http://localhost:8000/api/user/login\">http://localhost:8000/api/user/login</a></p>\n<p>代理到请求：<a href=\"http://localhost:8080/api/user/login\">http://localhost:8080/api/user/login</a></p>\n<p><img src=\"https://qiniuyun.code-nav.cn/img/image-20220319005859098.png\" alt=\"\"></p>\n<h2 id=\"前端框架介绍\"><a href=\"#前端框架介绍\" class=\"headerlink\" title=\"前端框架介绍\"></a>前端框架介绍</h2><h3 id=\"Ant-Design-Pro（Umi-框架）权限管理\"><a href=\"#Ant-Design-Pro（Umi-框架）权限管理\" class=\"headerlink\" title=\"Ant Design Pro（Umi 框架）权限管理\"></a>Ant Design Pro（Umi 框架）权限管理</h3><ul>\n<li>app.tsx：项目全局入口文件，定义了整个项目中使用的公共数据（比如用户信息）</li>\n<li>access.ts 控制用户的访问权限</li>\n</ul>\n<p>获取初始状态流程：首次访问页面（刷新页面），进入 app.tsx，执行 getInitialState 方法，该方法的返回值就是全局可用的状态值。</p>\n<h3 id=\"ProComponents-高级表单\"><a href=\"#ProComponents-高级表单\" class=\"headerlink\" title=\"ProComponents 高级表单\"></a>ProComponents 高级表单</h3><ol>\n<li>通过 columns 定义表格有哪些列</li>\n<li>columns 属性<ul>\n<li>dataIndex 对应返回数据对象的属性</li>\n<li>title 表格列名</li>\n<li>copyable 是否允许复制</li>\n<li>ellipsis 是否允许缩略</li>\n<li>valueType：用于声明这一列的类型（dateTime、select）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"框架关系\"><a href=\"#框架关系\" class=\"headerlink\" title=\"框架关系\"></a>框架关系</h3><p>Ant Design 组件库 =&gt; 基于 React 实现</p>\n<p>Ant Design Procomponents =&gt; 基于 Ant Design 实现</p>\n<p>Ant Design Pro 后台管理系统 =&gt; 基于 Ant Design + React + Ant Design Procomponents + 其他的库实现</p>\n<h3 id=\"其他知识\"><a href=\"#其他知识\" class=\"headerlink\" title=\"其他知识\"></a>其他知识</h3><p>MFSU：前端编译优化</p>\n<h2 id=\"后端优化\"><a href=\"#后端优化\" class=\"headerlink\" title=\"后端优化\"></a>后端优化</h2><h3 id=\"通用返回对象\"><a href=\"#通用返回对象\" class=\"headerlink\" title=\"通用返回对象\"></a>通用返回对象</h3><p>目的：给对象补充一些信息，告诉前端这个请求在业务层面上是成功还是失败</p>\n<p>200、404、500、502、503</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n    &quot;name&quot;: &quot;Brandon&quot;\n&#125;\n\n↓\n\n&#x2F;&#x2F; 成功\n&#123;\n    &quot;code&quot;: 0 &#x2F;&#x2F; 业务状态码\n    &quot;data&quot;: &#123;\n        &quot;name&quot;: &quot;Brandon&quot;\n    &#125;,\n\t&quot;message&quot;: &quot;ok&quot;\n&#125;\n\n\n&#x2F;&#x2F; 错误\n&#123;\n    &quot;code&quot;: 50001 &#x2F;&#x2F; 业务状态码\n    &quot;data&quot;: null\n\t&quot;message&quot;: &quot;用户操作异常、xxx&quot;\n&#125;</code></pre>\n<p>自定义错误码，返回类支持返回正常和错误</p>\n<h3 id=\"封装全局异常处理器\"><a href=\"#封装全局异常处理器\" class=\"headerlink\" title=\"封装全局异常处理器\"></a>封装全局异常处理器</h3><h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><ol>\n<li><p>定义业务异常类</p>\n<ol>\n<li>相对于 java 的异常类，支持更多字段</li>\n<li>自定义构造函数，更灵活 / 快捷的设置字段</li>\n</ol>\n</li>\n<li>编写全局异常处理器（利用 Spring AOP，在调用方法前后进行额外的处理）</li>\n</ol>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ol>\n<li>捕获代码中所有的异常，内部消化，让前端得到更详细的业务报错 / 信息</li>\n<li>同时屏蔽掉项目框架本身的异常（不暴露服务器内部状态）</li>\n<li>集中处理，比如记录日志</li>\n</ol>\n<h2 id=\"前端优化\"><a href=\"#前端优化\" class=\"headerlink\" title=\"前端优化\"></a>前端优化</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>直播的 0：00 - 0：35 为踩坑过程，可跳过</p></blockquote>\n<h3 id=\"全局响应处理\"><a href=\"#全局响应处理\" class=\"headerlink\" title=\"全局响应处理\"></a>全局响应处理</h3><p>应用场景：我们需要对接口的 <strong>通用响应</strong> 进行统一处理，比如从 response 中取出 data；或者根据 code 去集中处理错误，比如用户未登录、没权限之类的。</p>\n<p>优势：不用在每个接口请求中都去写相同的逻辑</p>\n<p>实现：参考你用的请求封装工具的官方文档，比如 umi-request（<a href=\"https://github.com/umijs/umi-request#interceptor、https://blog.csdn.net/huantai3334/article/details/116780020）。如果你用\">https://github.com/umijs/umi-request#interceptor、https://blog.csdn.net/huantai3334/article/details/116780020）。如果你用</a> <strong>axios</strong>，参考 axios 的文档。</p>\n<p>创建新的文件，在该文件中配置一个全局请求类。在发送请求时，使用我们自己的定义的全局请求类。</p>\n<h2 id=\"用户校验\"><a href=\"#用户校验\" class=\"headerlink\" title=\"用户校验\"></a>用户校验</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>仅适用于用户可信的情况</p></blockquote>\n<p>先让用户自己填：2 - 5 位编号，全凭自觉。</p>\n<p>后台补充对编号的校验：长度校验、唯一性校验</p>\n<p>前端补充输入框，适配后端。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>后期拉取星球数据，定期清理违规用户</p></blockquote>\n<h2 id=\"多环境\"><a href=\"#多环境\" class=\"headerlink\" title=\"多环境\"></a>多环境</h2><p>参考文章：<a href=\"https://blog.csdn.net/weixin_41701290/article/details/120173283\">https://blog.csdn.net/weixin_41701290/article/details/120173283</a></p>\n<p>本地开发：localhost（127.0.0.1）</p>\n<p>多环境：指同一套项目代码在不同的阶段需要根据实际情况来调整配置并且部署到不同的机器上。</p>\n<p>为什么需要？</p>\n<ol>\n<li>每个环境互不影响</li>\n<li>区分不同的阶段：开发 / 测试 / 生产</li>\n<li>对项目进行优化：<ol>\n<li>本地日志级别</li>\n<li>精简依赖，节省项目体积</li>\n<li>项目的环境 / 参数可以调整，比如 JVM 参数</li>\n</ol>\n</li>\n</ol>\n<p>针对不同环境做不同的事情。</p>\n<p>多环境分类：</p>\n<ol>\n<li>本地环境（自己的电脑）localhost</li>\n<li>开发环境（远程开发）大家连同一台机器，为了大家开发方便</li>\n<li>测试环境（测试）开发 / 测试 / 产品，单元测试 / 性能测试 / 功能测试 / 系统集成测试，独立的数据库、独立的服务器</li>\n<li>预发布环境（体验服）：和正式环境一致，正式数据库，更严谨，查出更多问题</li>\n<li>正式环境（线上，公开对外访问的项目）：尽量不要改动，保证上线前的代码是 “完美” 运行</li>\n<li>沙箱环境（实验环境）：为了做实验</li>\n</ol>\n<h3 id=\"前端多环境实战\"><a href=\"#前端多环境实战\" class=\"headerlink\" title=\"前端多环境实战\"></a>前端多环境实战</h3><ul>\n<li><p>请求地址</p>\n<ul>\n<li><p>开发环境：localhost:8000</p>\n</li>\n<li><p>线上环境：user-backend.code-nav.cn</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">startFront(env) &#123;\n    if(env &#x3D;&#x3D;&#x3D; &#39;prod&#39;) &#123;\n        &#x2F;&#x2F; 不输出注释 \n        &#x2F;&#x2F; 项目优化\n        &#x2F;&#x2F; 修改请求地址\n    &#125; else &#123;\n        &#x2F;&#x2F; 保持本地开发逻辑\n    &#125;\n&#125;</code></pre>\n<p>用了 umi 框架，build 时会自动传入 NODE_ENV == production 参数，start NODE_ENV 参数为 development</p>\n</li>\n<li><p>启动方式</p>\n<ul>\n<li>开发环境：npm run start（本地启动，监听端口、自动更新）</li>\n<li>线上环境：npm run build（项目构建打包），可以使用 serve 工具启动（npm i -g serve）</li>\n</ul>\n</li>\n<li><p>项目的配置</p>\n<p>不同的项目（框架）都有不同的配置文件，umi 的配置文件是 config，可以在配置文件后添加对应的环境名称后缀来区分开发环境和生产环境。参考文档：<a href=\"https://umijs.org/zh-CN/docs/deployment\">https://umijs.org/zh-CN/docs/deployment</a></p>\n<ul>\n<li>开发环境：config.dev.ts</li>\n<li>生产环境：config.prod.ts</li>\n<li>公共配置：config.ts 不带后缀</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"后端多环境实战\"><a href=\"#后端多环境实战\" class=\"headerlink\" title=\"后端多环境实战\"></a>后端多环境实战</h3><p>SpringBoot 项目，通过 application.yml 添加不同的后缀来区分配置文件</p>\n<p>可以在启动项目时传入环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">java -jar .\\user-center-backend-0.0.1-SNAPSHOT.jar --spring.profiles.active&#x3D;prod</code></pre>\n<p>主要是改：</p>\n<ul>\n<li><p>依赖的环境地址</p>\n<ul>\n<li><p>数据库地址</p>\n</li>\n<li><p>缓存地址</p>\n</li>\n<li><p>消息队列地址</p>\n</li>\n<li><p>项目端口号</p>\n</li>\n</ul>\n</li>\n<li><p>服务器配置</p>\n</li>\n</ul>\n<h2 id=\"项目部署\"><a href=\"#项目部署\" class=\"headerlink\" title=\"项目部署\"></a>项目部署</h2><p>参考文章：<a href=\"https://www.bilibili.com/read/cv16179200\">https://www.bilibili.com/read/cv16179200</a></p>\n<p>需要 Linux 服务器（建议大家用 CentOS 8+ / 7.6 以上）</p>\n<h3 id=\"原始部署\"><a href=\"#原始部署\" class=\"headerlink\" title=\"原始部署\"></a>原始部署</h3><p>什么都自己装</p>\n<h4 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h4><p>需要 web 服务器：<strong>nginx</strong> 、apache、tomcat</p>\n<p>安装 nginx 服务器：</p>\n<ol>\n<li><p>用系统自带的软件包管理器快速安装，比如 centos 的 yum</p>\n</li>\n<li><p>自己到官网安装（参考文章）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -o nginx-1.21.6.tar.gz http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.21.6.tar.gz\n\ntar -zxvf nginx-1.21.6.tar.gz\n\ncd nginx-1.21.6\n\n   37  2022-04-17 23:30:09 yum install pcre pcre-devel -y\n   39  2022-04-17 23:30:59 yum install openssl openssl-devel -y\n   41  2022-04-17 23:31:57 .&#x2F;configure --with-http_ssl_module --with-http_v2_module --with-stream\n   42  2022-04-17 23:32:13 make\n   43  2022-04-17 23:32:54 make install\n   48  2022-04-17 23:33:40 ls &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx\n   vim &#x2F;etc&#x2F;profile\n  在最后一行添加：export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin\t\n  \n  nginx\n  \n  netstat -ntlp 查看启动情况</code></pre>\n<p>注意 nginx 权限</p>\n</li>\n</ol>\n<h4 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h4><p>java、maven</p>\n<p>安装：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum install -y java-1.8.0-openjdk*\n\ncurl -o apache-maven-3.8.5-bin.tar.gz https:&#x2F;&#x2F;dlcdn.apache.org&#x2F;maven&#x2F;maven-3&#x2F;3.8.5&#x2F;binaries&#x2F;apache-maven-3.8.5-bin.tar.gz\n\ngit clone xxx 下载代码\n\n打包构建，跳过测试\nmvn package -DskipTests\n\njava -jar .&#x2F;user-center-backend-0.0.1-SNAPSHOT.jar --spring.profiles.active&#x3D;prod</code></pre>\n<h3 id=\"宝塔-Linux-部署\"><a href=\"#宝塔-Linux-部署\" class=\"headerlink\" title=\"宝塔 Linux 部署\"></a>宝塔 Linux 部署</h3><p>Linux 运维面板</p>\n<p>官方安装教程：<a href=\"https://www.bt.cn/new/download.html\">https://www.bt.cn/new/download.html</a></p>\n<p>方便管理服务器、方便安装软件</p>\n<h3 id=\"前端托管\"><a href=\"#前端托管\" class=\"headerlink\" title=\"前端托管\"></a>前端托管</h3><p>前端腾讯云 web 应用托管（比容器化更傻瓜式，不需要自己写构建应用的命令，就能启动前端项目）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://console.cloud.tencent.com/webify/new\">https://console.cloud.tencent.com/webify/new</a></p></blockquote>\n<ul>\n<li>小缺点：需要将代码放到代码托管平台上</li>\n<li>优势：不用写命令、代码更新时自动构建</li>\n</ul>\n<h3 id=\"Docker-部署\"><a href=\"#Docker-部署\" class=\"headerlink\" title=\"Docker 部署\"></a>Docker 部署</h3><p>docker 是容器，可以将项目的环境（比如 java、nginx）和项目的代码一起打包成镜像，所有同学都能下载镜像，更容易分发和移植。</p>\n<p>再启动项目时，不需要敲一大堆命令，而是直接下载镜像、启动镜像就可以了。</p>\n<p>docker 可以理解为软件安装包。</p>\n<p>Docker 安装：<a href=\"https://www.docker.com/get-started/\">https://www.docker.com/get-started/</a> 或者宝塔安装</p>\n<p>Dockerfile 用于指定构建 Docker 镜像的方法</p>\n<p>Dockerfile 一般情况下不需要完全从 0 自己写，建议去 github、gitee 等托管平台参考同类项目（比如 springboot）</p>\n<p>Dockerfile 编写：</p>\n<ul>\n<li>FROM 依赖的基础镜像</li>\n<li>WORKDIR 工作目录</li>\n<li>COPY 从本机复制文件</li>\n<li>RUN 执行命令</li>\n<li>CMD / ENTRYPOINT（附加额外参数）指定运行容器时默认执行的命令</li>\n</ul>\n<p>根据 Dockerfile 构建镜像：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 后端\ndocker build -t user-center-backend:v0.0.1 .\n\n# 前端\ndocker build -t user-center-frontend:v0.0.1 .</code></pre>\n<p>Docker 构建优化：减少尺寸、减少构建时间（比如多阶段构建，可以丢弃之前阶段不需要的内容）</p>\n<p>docker run 启动：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 前端\ndocker run -p 80:80 -d user-center-frontend:v0.0.1\n\n# 后端\ndocker run -p 8080:8080 user-center-backend:v0.0.1</code></pre>\n<p>虚拟化</p>\n<ol>\n<li>端口映射：把本机的资源（实际访问地址）和容器内部的资源（应用启动端口）进行关联</li>\n<li>目录映射：把本机的端口和容器应用的端口进行关联</li>\n</ol>\n<p>进入容器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker exec -i -t  fee2bbb7c9ee &#x2F;bin&#x2F;bash</code></pre>\n<p>查看进程：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker ps </code></pre>\n<p>查看日志：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker logs -f [container-id]</code></pre>\n<p>杀死容器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker kill</code></pre>\n<p>强制删除镜像：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rmi -f</code></pre>\n<h3 id=\"Docker-平台部署\"><a href=\"#Docker-平台部署\" class=\"headerlink\" title=\"Docker 平台部署\"></a>Docker 平台部署</h3><ol>\n<li>云服务商的容器平台（腾讯云、阿里云）</li>\n<li>面向某个领域的容器平台（前端 / 后端微信云托管）<strong>要花钱！</strong></li>\n</ol>\n<p>容器平台的好处：</p>\n<ol>\n<li>不用输命令来操作，更方便省事</li>\n<li>不用在控制台操作，更傻瓜式、更简单</li>\n<li>大厂运维，比自己运维更省心</li>\n<li>额外的能力，比如监控、告警、其他（存储、负载均衡、自动扩缩容、流水线）</li>\n</ol>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><p>前端项目访问流程：用户输入网址 =&gt; 域名解析服务器（把网址解析为 ip 地址 / 交给其他的域名解析服务） =&gt; 服务器 =&gt;（防火墙）=&gt; nginx 接收请求，找到对应的文件，返回文件给前端 =&gt; 前端加载文件到浏览器中（js、css） =&gt; 渲染页面</p>\n<p>后端项目访问流程：用户输入网址 =&gt; 域名解析服务器 =&gt; 服务器 =&gt; nginx 接收请求 =&gt; 后端项目（比如 8080端口）</p>\n<p>nginx 反向代理的作用：替服务器接收请求，转发请求</p>\n<h2 id=\"跨域问题解决\"><a href=\"#跨域问题解决\" class=\"headerlink\" title=\"跨域问题解决\"></a>跨域问题解决</h2><p>浏览器为了用户的安全，仅允许向 <strong>同域名、同端口</strong> 的服务器发送请求。</p>\n<p>如何解决跨域？</p>\n<p>最直接的方式：把域名、端口改成相同的</p>\n<h3 id=\"添加跨域头\"><a href=\"#添加跨域头\" class=\"headerlink\" title=\"添加跨域头\"></a>添加跨域头</h3><p>让服务器告诉浏览器：允许跨域（返回 cross-origin-allow 响应头）</p>\n<h4 id=\"1-网关支持（Nginx）\"><a href=\"#1-网关支持（Nginx）\" class=\"headerlink\" title=\"1. 网关支持（Nginx）\"></a>1. 网关支持（Nginx）</h4><pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"># 跨域配置\nlocation ^~ &#x2F;api&#x2F; &#123;\n    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;;\n    add_header &#39;Access-Control-Allow-Origin&#39; $http_origin;\n    add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;\n    add_header Access-Control-Allow-Methods &#39;GET, POST, OPTIONS&#39;;\n    add_header Access-Control-Allow-Headers &#39;*&#39;;\n    if ($request_method &#x3D; &#39;OPTIONS&#39;) &#123;\n        add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;\n        add_header &#39;Access-Control-Allow-Origin&#39; $http_origin;\n        add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;\n        add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#39;;\n        add_header &#39;Access-Control-Max-Age&#39; 1728000;\n        add_header &#39;Content-Type&#39; &#39;text&#x2F;plain; charset&#x3D;utf-8&#39;;\n        add_header &#39;Content-Length&#39; 0;\n        return 204;\n    &#125;\n&#125;</code></pre>\n<h4 id=\"2-修改后端服务\"><a href=\"#2-修改后端服务\" class=\"headerlink\" title=\"2. 修改后端服务\"></a>2. 修改后端服务</h4><ol>\n<li><p>配置 @CrossOrigin 注解</p>\n</li>\n<li><p>添加 web 全局请求拦截器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class WebMvcConfg implements WebMvcConfigurer &#123;\n \n    @Override\n    public void addCorsMappings(CorsRegistry registry) &#123;\n        &#x2F;&#x2F;设置允许跨域的路径\n        registry.addMapping(&quot;&#x2F;**&quot;)\n                &#x2F;&#x2F;设置允许跨域请求的域名\n                &#x2F;&#x2F;当**Credentials为true时，**Origin不能为星号，需为具体的ip地址【如果接口不带cookie,ip无需设成具体ip】\n                .allowedOrigins(&quot;http:&#x2F;&#x2F;localhost:9527&quot;, &quot;http:&#x2F;&#x2F;127.0.0.1:9527&quot;, &quot;http:&#x2F;&#x2F;127.0.0.1:8082&quot;, &quot;http:&#x2F;&#x2F;127.0.0.1:8083&quot;)\n                &#x2F;&#x2F;是否允许证书 不再默认开启\n                .allowCredentials(true)\n                &#x2F;&#x2F;设置允许的方法\n                .allowedMethods(&quot;*&quot;)\n                &#x2F;&#x2F;跨域允许时间\n                .maxAge(3600);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>定义新的 corsFilter Bean，参考：<a href=\"https://www.jianshu.com/p/b02099a435bd\">https://www.jianshu.com/p/b02099a435bd</a></p>\n</li>\n</ol>\n<h2 id=\"项目优化点\"><a href=\"#项目优化点\" class=\"headerlink\" title=\"项目优化点\"></a>项目优化点</h2><ol>\n<li>功能扩充<ol>\n<li>管理员创建用户、修改用户信息、删除用户</li>\n<li>上传头像</li>\n<li>按照更多的条件去查询用户</li>\n<li>更改权限</li>\n</ol>\n</li>\n<li>修改 Bug</li>\n<li>项目登录改为分布式 session（单点登录 - redis）</li>\n<li>通用性<ol>\n<li>set-cookie domain 域名更通用，比如改为 *.xxx.com</li>\n<li>把用户管理系统 =&gt; 用户中心（之后所有的服务都请求这个后端）</li>\n</ol>\n</li>\n<li>后台添加全局请求拦截器（统一去判断用户权限、统一记录请求日志）</li>\n</ol>\n","text":"用户中心笔记目标：完整了解做项目的思路，接触一些企业级的开发技术，轻松做出管理系统。 企业做项目流程需求分析 =&gt; 设计（概要设计、详细设计）=&gt; 技术选型 =&gt; 初始化 / 引入需要的技术 =&gt; 写 Demo =&gt; 写代码（实现业务逻辑） =&gt...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Project","slug":"Project","count":2,"path":"api/categories/Project.json"}],"tags":[{"name":"Project","slug":"Project","count":2,"path":"api/tags/Project.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">用户中心笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%81%E4%B8%9A%E5%81%9A%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">企业做项目流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\"><span class=\"toc-text\">需求分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B\"><span class=\"toc-text\">技术选型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E7%A7%8D%E5%88%9D%E5%A7%8B%E5%8C%96-Java-%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3 种初始化 Java 项目的方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">数据库设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%EF%BC%9F\"><span class=\"toc-text\">什么是设计数据库表？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E8%A1%A8%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">用户表设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">自动生成器的使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%86%8C%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">注册逻辑设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">登录功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">接口设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">登录逻辑</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E6%98%AF%E5%93%AA%E4%B8%AA%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%BA%86%EF%BC%9F\"><span class=\"toc-text\">如何知道是哪个用户登录了？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">用户管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%99%E4%BB%A3%E7%A0%81%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">写代码流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">前后端交互</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%BA%93%E5%8F%8A%E5%B0%81%E8%A3%85%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">前端请求库及封装关系</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">代理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BE%E4%BE%8B\"><span class=\"toc-text\">举例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">前端框架介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ant-Design-Pro%EF%BC%88Umi-%E6%A1%86%E6%9E%B6%EF%BC%89%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">Ant Design Pro（Umi 框架）权限管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ProComponents-%E9%AB%98%E7%BA%A7%E8%A1%A8%E5%8D%95\"><span class=\"toc-text\">ProComponents 高级表单</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%86%E6%9E%B6%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">框架关系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">其他知识</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8E%E7%AB%AF%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">后端优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E7%94%A8%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">通用返回对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">封装全局异常处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">前端优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86\"><span class=\"toc-text\">全局响应处理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">用户校验</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">多环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">前端多环境实战</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8E%E7%AB%AF%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">后端多环境实战</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">项目部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%A7%8B%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">原始部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF\"><span class=\"toc-text\">前端</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%8E%E7%AB%AF\"><span class=\"toc-text\">后端</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9D%E5%A1%94-Linux-%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">宝塔 Linux 部署</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E6%89%98%E7%AE%A1\"><span class=\"toc-text\">前端托管</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">Docker 部署</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">Docker 平台部署</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D\"><span class=\"toc-text\">绑定域名</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">跨域问题解决</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E8%B7%A8%E5%9F%9F%E5%A4%B4\"><span class=\"toc-text\">添加跨域头</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%BD%91%E5%85%B3%E6%94%AF%E6%8C%81%EF%BC%88Nginx%EF%BC%89\"><span class=\"toc-text\">1. 网关支持（Nginx）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BF%AE%E6%94%B9%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">2. 修改后端服务</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E7%82%B9\"><span class=\"toc-text\">项目优化点</span></a></li></ol></li></ol>","author":{"name":"Brandon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60676912?s=460&v=4","link":"/","description":"Never back down","socials":{"github":"https://github.com/DjyBrandon","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Brandon_","juejin":"https://juejin.cn/user/541388827538679","customs":{}}},"mapped":true,"prev_post":{"title":"1 计算机系统概论","uid":"6c60290e7688a2cab83459ffd68eb546","slug":"1 计算机系统概论","date":"2022-10-02T10:37:36.000Z","updated":"2022-10-06T07:52:26.401Z","comments":true,"path":"api/articles/1 计算机系统概论.json","keywords":null,"cover":"https://www.sigarch.org/wp-content/uploads/2019/09/AdobeStock_251486231.jpeg","text":"0 导读 脉冲信号 1 计算机的分类1.1 电子计算机 电子模拟计算机 “模拟”就是相似的意思。模拟计算机的特点是数值由连续量来表示，运算过程也是连续的。 电子数字计算机 它是在算盘的基础上发展起来的，是用数目字来表示数量的大小。数字计算机的主要特点是按位运算，并且不连续地跳动计...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Computer Organization","slug":"Computer-Organization","count":1,"path":"api/categories/Computer-Organization.json"}],"tags":[{"name":"Computer Organization","slug":"Computer-Organization","count":2,"path":"api/tags/Computer-Organization.json"}],"author":{"name":"Brandon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/60676912?s=460&v=4","link":"/","description":"Never back down","socials":{"github":"https://github.com/DjyBrandon","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Brandon_","juejin":"https://juejin.cn/user/541388827538679","customs":{}}}},"next_post":{}}